package Java_Extend.Multithreading;

public class Callable_Future_General {

    /*               *** Callable - Интерфейс для многопоточности, реализует метод call
                   аналог Runnable, но возвращает результат и способен бросать исключения


                   *** Future - Интерфейс,который представляет результат,
                   который в конечном итоге будет возвращен в будущем.

                                            * Callable

    Очень часто при работе с потоками нам нужно получать какой-то результат и было бы очень удобно,
    чтобы поток сам возвращал результаты своей работы.
    Именно поэтому еще в Java 5 был введен интерфейс  java.util.concurrent.Callable.
    Он очень похож на интерфейс Runnable, но может вернуть результат в виде объекта Object
    и способен бросать исключения.

    В отличие от Runnable, новый интерфейс объявляет метод call, который возвращает результат.
    Кроме того, по умолчанию он throws Exception.
    То есть избавляет нас от необходимости на проверяемые исключения писать try-catch блоки.

    Интерфейс Callable использует дженерики для определения типа возвращаемого объекта.
    Класс Executors предоставляет полезные методы для выполнения Callable в пуле потоков.
    Callable таски (задачи) возвращают java.util.concurrent.Future объект.
    Используя Future мы можем узнать статус Callable таска и получить возвращенный объект.
    Это обеспечивает get() метод, который ждет завершение Callable, чтобы вернуть результат.

    Future обеспечивает метод cancel() для отмены Callable таска. Есть перегруженный вариант метода get(),
    где мы можем указать время ожидания результата, это нужно для избежания блокировки
    текущего потока на длительное время. Также есть методы isDone() и isCancelled(),
    которые используются для получения статуса ассоциированного Callable таска.

    Интерфейс Java Callable(java.util.concurrent.Callable) представляет асинхронную задачу,
    которая может быть выполнена отдельным потоком.
    Например, можно передать объект Callable в Java ExecutorService, который затем выполнит его асинхронно.
    Метод call() вызывается для выполнения асинхронной задачи.

    Интерфейс Callable довольно прост. Он содержит единственный метод с именем call().

    Если задача выполняется асинхронно, результат обычно передается обратно через Java Future.
    Это тот случай, когда Callable передается в ExecutorService для одновременного выполнения.

    Callable использует Generic для определения типа возвращаемого объекта.
    Класс Executors предоставляет полезные методы для выполнения Java Callable в пуле потоков.
    Поскольку вызываемые задачи выполняются параллельно, нам нужно дождаться возвращенного объекта.

    Runnable изначально был разработан для длительного параллельного выполнения,
    например, одновременный запуск сетевого сервера или просмотр каталога на наличие новых файлов.
    Интерфейс Callable больше предназначен для одноразовых задач, которые возвращают один результат.


                                              * Future

    Интерфейс Future - это интерфейс, который представляет результат,
    который в конечном итоге будет возвращен в будущем.
    Мы можем проверить, получил ли Future результат, ожидает ли он результата или потерпел неудачу,
    прежде чем мы попытаемся получить к нему доступ.


    * Методы интерфейса Future:

    Метод	                            Описание
    cancel (boolean mayInterruptIfRunning)	    попытка завершения задачи
    V get()	                                    ожидание (при необходимости) завершения задачи,
                                                после чего можно будет получить результат
    V get(long timeout, TimeUnit unit)	        ожидание (при необходимости) завершения задачи в течение
                                                определенного времени, после чего можно будет получить результат
    isCancelled()	                            вернет true, если выполнение задачи будет прервано прежде завершения
    isDone()	                                вернет true, если задача завершена


    Интерфейс Future также, как и интерфейс Callable, использует Generic'и.
    Методы интерфейса можно использовать для проверки завершения работы потока,
    ожидания завершения и получения результата. Результат выполнения может быть получен методом get,
    если поток завершил работу. Прервать выполнения задачи можно методом cancel.
    Дополнительные методы позволяют определить завершение задачи : нормальное или прерванное.
    Если задача завершена, то прервать ее уже невозможно.


        - Mетода get() устанавливает блокировку до тех пор, пока не завершится вычисление.
        - Второй метод генерирует исключение TimeoutException, если истекает таймаут до завершения вычислений.
    Если прерывается поток, выполняющий вычисление, оба метода генерируют исключение InterruptedException.
    Если вычисление уже завершено, get() немедленно возвращает управление.
    Каждый вызов get() устанавливает блокировку до тех пор, пока не будет готов результат.
    Конечно, потоки работают параллельно, так что есть шанс, что результаты будут готовы почти одновременно.

        - Метод isDone() возвращает false, если вычисление продолжается, и true - если оно завершено.
        - Вы можете прервать вычисление, вызвав метод Cancel().
        Если вычисление еще не стартовало, оно отменяется и уже не будет запущено.
        Если же вычисление уже идет, оно прерывается в случае равенства true параметра mayInterrupt.

                                                     *** FutureTask

        Класс-оболочка FutureTask представляет собой удобный механизм для превращения Callable
        одновременно в Future и Runnable, реализуя оба интерфейса.
















     */



}
