package Java_Extend.Functional_Programming;

import java.util.Comparator;

public class Lambda_General {
    /*


    Lambda-выражения – это анонимные функции (может и не 100% верное определение для Java,
    но зато привносит некоторую ясность). Проще говоря, это метод без объявления,
    т.е. без модификаторов доступа, возвращающие значение и имя.


    Лямбда-выражения или анонимные функции — это блоки кода с параметрами,
    которые можно вызвать из другого места программы.
    Они называются анонимными, потому что в отличие от функций, у них нет имён.

        Лямбда-выражения в Java:
    - Присутствуют начиная с 8 версии.
    - Являются анонимными классами, реализующими метод функционального интерфейса.
    - Имеют доступ только к final (или effectively final) переменным
    из охватывающей области видимости (для потокобезопасности).
    - Не могут возвращать значение в каких-то ветках, а в других не возвращать.
    - Позволяют уменьшить количество кода и повысить его читаемость.


     */


//    эволюция лямбды на примере метода сравнивания compare у класса Integer

    public static void main(String[] args) {

        Comparator<Integer> myComparator = (Integer o1, Integer o2) -> {return Integer.compare(o1, o2);};

        Comparator<Integer> myComparator2 = (o1, o2) ->  Integer.compare(o1, o2);

        Comparator<Integer> myComparator3 = Integer::compare;

    }


}
