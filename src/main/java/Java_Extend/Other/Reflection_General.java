package Java_Extend.Other;

public class Reflection_General {
/*

    Рефлексия в Java осуществляется с помощью Java Reflection API.

    Рефлексия (от позднелат. reflexio — обращение назад) — это механизм исследования данных
    о программе во время её выполнения. Рефлексия позволяет исследовать информацию о полях,
    методах и конструкторах классов.

    Сам же механизм рефлексии позволяет обрабатывать типы, отсутствующие при компиляции,
    но появившиеся во время выполнения программы. Рефлексия и наличие логически целостной
    модели выдачи информации об ошибках дает возможность создавать корректный динамический код.

    Вот основной список того, что позволяет рефлексия:
        - Узнать/определить класс объекта;
        - Получить информацию о модификаторах класса, полях, методах, константах, конструкторах и суперклассах;
        - Выяснить, какие методы принадлежат реализуемому интерфейсу/интерфейсам;
        - Создать экземпляр класса, причем имя класса неизвестно до момента выполнения программы;
        - Получить и установить значение поля объекта по имени;
        - Вызвать метод объекта по имени.

    Рефлексия используется практически во всех современных технологиях Java.
    Сложно себе представить, могла бы Java, как платформа, достигнуть такого огромного распространения без рефлексии.

    В java инкапсуляция служит для сокрытия и ограничения доступа одних компонентов программы к другим.
    Используя модификатор private мы подразумеваем, что доступ к этому полю будет только в пределах класса,
    где это поле существует, основываясь на этом мы строим дальнейшую архитектуру программы.
    С помощью рефлексии можно пробираться куда угодно.

    Хорошим примером в виде архитектурного решения является порождающий шаблон проектирования — Singleton.
    Основная его идея в том, чтобы на протяжении всей работы программы класс,
    реализующий этот шаблон был только в одном экземпляре. Осуществляется это при помощи установки
    конструктору по умолчанию private модификатор доступа. И будет очень нехорошо, если какой-то программист
    со своей рефлексией будет плодить такие классы.


                                            Из другой статьи

    Рефлексия в Java — это механизм, с помощью которого можно вносить изменения и получать информацию о классах,
    интерфейсах, полях и методах во время выполнения, при этом не зная имен этих классов, методов и полей.
    Кроме того, Reflection API дает возможность создавать новые экземпляры классов, вызывать методы,
    а также получать или устанавливать значения полей.

    Начинающие Java-программисты часто путают рефлексию с интроспекцией.
    Интроспекция — проверка кода и возможность видеть типы объектов во время выполнения.
    Рефлексия дает возможность вносить изменения во время выполнения программы путем использования интроспекции.
    Здесь важно понимать различие, поскольку некоторые языки поддерживают интроспекцию,
    но не поддерживают рефлексию, например, C++.


    Java Reflection API
    Рефлексия — мощная концепция, которая лежит в основе большинства современных Java/Java EE фреймворков и библиотек.
    Например, для Java классическими примерами являются:

    JUnit – фреймворк для модульного тестирования. Он использует рефлексию для парсинга аннотаций (например, @Test)
    для получения описанных программистом тестовых методов и дальнейшего их выполнения.
    Spring – фреймворк для разработки приложений на Java платформе, в основе которого лежит внедрение зависимостей
    (инверсия управления).

                                 Ограничения при работе с рефлексией в Java
    Почему мы не должны использовать рефлексию в обычном программировании,
    когда уже есть доступ к интерфейсам и классам. Причин несколько:

    - 1. Низкая производительность — поскольку рефлексия в Java определяет типы динамически, то она сканирует classpath,
    чтобы найти класс для загрузки, в результате чего снижается производительность программы.
    - 2. Ограничения системы безопасности — рефлексия требует разрешения времени выполнения,
    которые не могут быть доступны для систем, работающих под управлением менеджера безопасности (Java Security Manager).
    - 3. Нарушения безопасности приложения — с помощью рефлексии мы можем получить доступ к части кода,
    к которой мы не должны получать доступ. Например, мы можем получить доступ к закрытым полям класса
    и менять их значения. Это может быть серьезной угрозой безопасности.
    - 4. Сложность в поддержке — код, написанный с помощью рефлексии трудно читать и отлаживать,
    что делает его менее гибким и трудно поддерживаемым.

                                   Java Reflection: Работа с классами
    Объект java.lang.Class является точкой входа для всех операций рефлексии.
    Для каждого типа объекта, JVM создает неизменяемый экземпляр java.lang.Class который предоставляет методы
    для получения свойств объекта, создания новых объектов, вызова методов.

    Все типы в Java, включая примитивные типы и массивы имеют связанный с ними java.lang.Class объект.
    Если мы знаем название класса во время компиляции, то сможем получить объект следующим образом:

     Class mClassObject = SomeObject.class

     .... по надобности сделать выписки с сайта
     - https://javadevblog.com/polnoe-rukovodstvo-po-java-reflection-api-refleksiya-na-primerah.html
     - https://habr.com/ru/company/skillfactory/blog/533478/















 */



}
