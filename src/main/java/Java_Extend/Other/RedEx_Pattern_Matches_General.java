package Java_Extend.Other;

public class RedEx_Pattern_Matches_General {
    /*

                                        Создание регулярных выражений в Java

    Чтобы создать RegEx в Java, нужно сделать два простых шага:

        - написать его в виде строки с учётом синтаксиса регулярных выражений;
        - скомпилировать эту строку в регулярное выражение;

    Работа с регулярными выражениями в любой Java-программе начинается с создания объекта класса Pattern.
    Для этого необходимо вызвать один из двух имеющихся в классе статических методов compile.
    Первый метод принимает один аргумент – строковый литерал регулярного выражения,
    а второй – плюс еще параметр, включающий режим сравнения шаблона с текстом:

                                                                                                                   *//**
        public static Pattern compile (String literal)
        public static Pattern compile (String literal, int flags)
                                                                                                                    *//*

    Список возможных значений параметра flags определен в классе Pattern
    и доступен нам как статические переменные класса. Например:
                                                                                                                   *//**
    Pattern pattern = Pattern.compile("java", Pattern.CASE_INSENSITIVE);
    //поиск совпадений с шаблоном будет производиться без учета регистра символов.
                                                                                                                    *//*

    По сути, класс Pattern — это конструктор регулярных выражений.
    Под «капотом» метод compile вызывает закрытый конструктор класса Pattern
    для создания скомпилированного представления.
    Такой способ создания экземпляра шаблона реализован с целью создания его в виде неизменяемого объекта.
    При создании производится синтаксическая проверка регулярного выражения.
    При наличии ошибок в строке – генерируется исключение PatternSyntaxException.

                                    Методы класса Pattern

    В классе Pattern есть и другие методы для работы с регулярными выражениями:

        - String pattern() – возвращает исходное строковое представление регулярного выражения,
    из которого был создан объект Pattern:                                                                         *//**

    Pattern pattern = Pattern.compile("abc");
    System.out.println(Pattern.pattern())    //"abc"
                                                                                                                    *//*
        - static boolean matches(String regex, CharSequence input) – позволяет проверить регулярное выражение,
    переданное в параметре regex на соответствие тексту, переданному в параметре input. Возвращает:

    true – если текст соответствует шаблону;
    false – в противном случае;

    Пример:
                                                                                                                   *//**
    System.out.println(Pattern.matches("А.+а","Алла"));//true
    System.out.println(Pattern.matches("А.+а","Егор Алла Александр"));//false
                                                                                                                    *//*

        - int flags() – возвращает значения параметра flags шаблона, которые были установлены при его создании,
        или 0, если этот параметр не был установлен. Пример:
                                                                                                                   *//**
    Pattern pattern = Pattern.compile("abc");
    System.out.println(pattern.flags());// 0
    Pattern pattern = Pattern.compile("abc",Pattern.CASE_INSENSITIVE);
    System.out.println(pattern.flags());// 2
                                                                                                                    *//*
        - String[] split(CharSequence text, int limit) – разбивает текст,
        переданный в качестве параметра на массив элементов String. Разбивка идет по патерну.
        Параметр limit определяет предельное количество совпадений, которое ищется в тексте:

    при limit>0 – выполняется поиск limit-1 совпадений;
    при limit<0 – выполняется поиск всех совпадений в тексте
    при limit=0 – выполняется поиск всех совпадений в тексте, при этом пустые строки в конце массива отбрасываются;
    Пример:

                                                                                                                   *//**
        public static void main(String[] args) {
        String text = "Егор Алла Анна";
        Pattern pattern = Pattern.compile("\\s");  // в данном примере идет разбивка по пробелу
        String[] strings = pattern.split(text,2);
        for (String s : strings) {
            System.out.println(s);
        }
        System.out.println("---------");
        String[] strings1 = pattern.split(text);
        for (String s : strings1) {
            System.out.println(s);
        }
        }
                                                                                                                    *//*
        Вывод на консоль:
                                                                                                                   *//**
        Егор
        Алла Анна
        --------
        Егор
        Алла
        Анна
                                                                                                                    *//*



                                           Методы класса Matcher

    Matcher представляет собой класс, из которого создается объект для поиска совпадений по шаблону.
    Matcher – это «поисковик», «движок» регулярных выражений.
    Для поиска ему надо дать две вещи: шаблон поиска и «адрес», по которому искать.
    Для создания объекта Matcher предусмотрен следующий метод в классе Pattern:

    В качестве аргумента метод принимает последовательность символов,
    в котором будет производиться поиск. Это объекты классов, реализующих интерфейс CharSequence.
    В качестве аргумента можно передать не только String, но и StringBuffer, StringBuilder, Segment и CharBuffer.

    Шаблоном для поиска является объект класса Pattern, на котором вызывается метод matcher.

    Пример создания матчера:                                                                                       *//**

        Pattern p = Pattern.compile("a*b");  // скомпилировали регулярное выражение в представление
        Matcher m = p.matcher("aaaaab");     //создали поисковик в тексте “aaaaab” по шаблону "a*b"

                                                                                                                    *//*


        - Метод boolean find() ищет очередное совпадение в тексте с шаблоном.
    С помощью этого метода и оператора цикла можно производить анализ всего текста по событийной модели
    (осуществлять необходимые операции при наступлении события – нахождении совпадения в тексте).
        - Например, с помощью методов этого класса int start() и int end() можно определять позиции совпадения в тексте,
        - а с помощью методов String replaceFirst(String replacement) и String replaceAll(String replacement)
    заменять в тексте совпадения на другой текст replacement.

    Пример:                                                                                                        *//**

    public static void main(String[] args) {
        String text = "Егор Алла Анна";
        Pattern pattern = Pattern.compile("А.+?а");

        Matcher matcher = pattern.matcher(text);
        while (matcher.find()) {
            int start=matcher.start();
            int end=matcher.end();
            System.out.println("Найдено совпадение " + text.substring(start,end)
                                 + " с "+ start + " по " + (end-1) + " позицию");
        }
        System.out.println(matcher.replaceFirst("Ира"));
        System.out.println(matcher.replaceAll("Ольга"));
        System.out.println(text);
    }                                                                                                               *//*

    Вывод программы:                                                                                               *//**

        Найдено совпадение Алла с 5 по 8 позицию
        Найдено совпадение Анна с 10 по 13 позицию
        Егор Ира Анна
        Егор Ольга Ольга
        Егор Алла Анна                                                                                              *//*

        Из примера видно, что методы replaceFirst и replaceAll создают новый объект String – строку,
        представляющую собой исходный текст, в котором совпадения с шаблоном заменены на текст,
        переданный методу в качестве аргумента. Причём метод replaceFirst заменяет только первое совпадение,
        а replaceAll – все совпадения в тесте. Исходный текст остается без изменений.

        Наиболее частые операции с регулярными выражениями при работе с текстом из классов Pattern и Matcher
        встроены в класс String. Это такие методы как split, matches, replaceFirst, replaceAll.
        Но на самом деле «под капотом» они используют классы Pattern и Matcher.
        Поэтому, если вам нужно заменить текст или сравнить строки в программе без написания лишнего кода,
        используйте методы класса String.
        Если же вам нужны расширенные возможности – вспомните о классах Pattern и Matcher.



     */


}
