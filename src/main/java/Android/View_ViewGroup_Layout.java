package Android;

public class View_ViewGroup_Layout {

/*

                                                        Разметка

    В Android-приложениях, пользовательский интерфейс построен на View и ViewGroup объектах.
    Класс ViewGroup является основой для подкласса Layout (разметка).

    Разметка (также используются термины компоновка или макет) хранится в виде XML-файла в папке /res/layout.
    Это сделано для того, чтобы отделить код от дизайна, как это принято во многих технологиях
    (HTML и CSS, Visual Studio и Expression Blend). Кроме основной компоновки для всего экрана,
    существуют дочерние компоновки для группы элементов. По сути, компоновка – это некий визуальный шаблон
    для пользовательского интерфейса приложения, который позволяет управлять элементами, их свойствами и расположением.
    В своей практике вам придется познакомиться со всеми способами размещения.

    Android-плагин для Eclipse включает в себя специальный редактор для создания разметки двумя способами.
    Редактор имеет две вкладки: одна позволяет увидеть, как будут отображаться элементы управления,
    а вторая – создавать XML-разметку вручную.

    Создавая пользовательский интерфейс в XML-файле, можно отделить дизайн приложения от программного кода.
    Можно изменять пользовательский интерфейс в файле разметки без необходимости изменения программного кода.
    Например, можно создавать XML-разметки для различных ориентаций экрана мобильного устройства (portrait, landscape),
    размеров экрана и языков интерфейса. Впрочем, элементы интерфейса можно создавать и программно, когда это необходимо.

    Каждый файл разметки должен содержать только один корневой элемент компоновки, который должен быть объектом View
    или ViewGroup. Внутри корневого элемента можно добавлять дополнительные объекты разметки или дочерние элементы
    интерфейса, чтобы постепенно формировать иерархию элементов, которую определяет создаваемая разметка.

    Существует несколько стандартных типов разметок:

    - FrameLayout является самым простым типом разметки. Обычно это пустое пространство на экране,
      которое можно заполнить только дочерним объектом View или ViewGroup. Все дочерние элементы FrameLayout
      прикрепляются к верхнему левому углу экрана. В разметке FrameLayout нельзя определить различное местоположение
      для дочернего объекта View. Последующие дочерние объекты View будут просто рисоваться
      поверх предыдущих представлений, частично или полностью затеняя их, если находящийся сверху объект непрозрачен
    - LinearLayout выравнивает все дочерние объекты в одном направлении – вертикально или горизонтально.
      Направление задается при помощи атрибута ориентации android:orientation. Все дочерние элементы помещаются
      в стек один за другим, так что вертикальный список представлений будет иметь только один дочерний
      элемент в строке независимо от того, насколько широким он является. Горизонтальное расположение списка будет
      размещать элементы в одну строку с высотой, равной высоте самого высокого дочернего элемента списка.
    - TableLayout позиционирует свои дочерние элементы в строки и столбцы. TableLayout не отображает линии
      обрамления для рядов, столбцов или ячеек. TableLayout может иметь ряды с разным количеством ячеек.
      При формировании разметки таблицы некоторые ячейки при необходимости можно оставлять пустыми.
      TableLayout удобно использовать, например, при создании логических игр типа Судоку,
      Крестики-Нолики и тому подобных.
    - RelativeLayout позволяет дочерним элементам определять свою позицию относительно родительского представления
      или относительно соседних дочерних элементов.

    Все описываемые разметки являются подклассами ViewGroup и наследуют свойства, определенные в классе View.

    Разметки ведут себя как элементы управления, и их можно группировать. Расположение элементов управления
    может быть вложенным. Например, можно использовать RelativeLayout в LinearLayout и так далее.
    Однако, слишком большая вложенность элементов управления вызывает проблемы с производительностью.





















 */


}
