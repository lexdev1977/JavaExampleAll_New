package Android;

public class Android_General {
/*

    Android – базирующаяся на ОС Linux операционная система с открытым исходным кодом,
    предназначенная для мобильных устройств – таких, как, например, смартфоны или планшетные компьютеры.


                                Что нужно знать Андроид разработчику
    - языки программирования Java, Kotlin
    - основы Android
    - Material Design -  это язык дизайна Google, который представляет собой большое руководство по визуальному,
      динамическому и интерактивному дизайну на разных платформах и устройствах.
    - ViewPager — это Диспетчер макетов, позволяющий реализовать навигацию жестурал
    - RecyclerView предназначен для оптимизации работы со списками
    - Room(альтернатива  DBFlow) - это высокоуровневый интерфейс для работы с базой данных SQLite
    - MySql - это реляционная база данных (СУБД). Реляционная — значит внутри неё есть данные,
      которые связаны между собой, и эту связь можно представить в виде таблиц.
    - Retrofit - популярная и удобная библиотека, которая используется, если приложению необходимо работать с сервером
    - Паттерн MVVM (Model-View-ViewModel) позволяет отделить логику приложения от визуальной части (представления).
      делит приложение на три функциональные части:
        Model — основная логика программы (работа с данными, вычисления, запросы и так далее)
        View — вид или представление (пользовательский интерфейс)
        ViewModel — модель представления, которая служит прослойкой между
        знать:
        - Coroutine (корутины) – это еще один способ создания асинхронного кода.
          Это потоки исполнения кода, которые организуются поверх аппаратных (системных) потоков)
        - Koin — это небольшая библиотека для написания внедрений зависимостей. (аналог dagger)
    - Firebase - это облачная база данных, которая позволяет пользователям хранить
      и получать сохраненную информацию, а также имеет удобные средства и методы взаимодействия с ней.
    - WorkManager из Android Jetpack -  используется для управления фоновыми рабочими задачами.


                                        Среда разработки
    Для разработки приложений под Android можно использовать любые из перечисленных операционных систем:

    Microsoft Windows XP или более поздняя версия
    Mac OS X 10.5.8 или более поздняя версия с чипом Intel
    Linux, включающая GNU C Library 2.7 или более позднюю версию
    При этом все необходимые инструменты для разработки Android-приложений
    находятся в свободном доступе и вы можете загрузить их из Интернета.
    Для того, чтобы начать создавать приложения под Android, вам понадобятся:

    Java JDK5 или более поздняя версия
    Android Studio


                                          Структура приложений

    Компоненты приложения являются своего рода «строительными блоками» для приложения Android.
    Эти компоненты связаны файлом-манифестом приложения AndroidManifest.xml,
    который описывает каждый компонент приложения и взаимодействие этих компонентов между собой.

    Есть четыре базовых типа компонентов, которые могут быть использованы в приложении Android:

    - Операции (Activities) представляют собой элементы пользовательского интерфейса (одна операция – один экран)
      и отвечают за взаимодействие пользователя с экраном мобильного устройства;

    - Службы (Services) представляют собой длительные операции, работающие в фоновом режиме
      и не имеющие пользовательского интерфейса (например, передача данных), вместо этого они, как правило,
      запускаются иными элементами, уже имеющими пользовательский интерфейс, и взаимодействуют с ними;

    - Приемники широковещательных сообщений (Broadcast receivers) представляют собой компоненты,
      реагирующие на объявления самой ОС, передаваемые всей системе
      (как хороший пример – объявление о низком уровне заряда батареи устройства).
      Они также не имеют пользовательского интерфейса, однако могут передавать данные другим компонентам,
      где они демонстрируются пользователю в виде уведомлений;

    - Поставщики контента (Content providers) представляют собой компоненты,
      управляющие взаимодействием приложения с его базой данных -
      посредством поставщика контента другие компоненты приложения могут запрашивать или изменять данные.


    Помимо четырех базовых типов, существуют дополнительные типы компонентов,
    используемые для выстраивания взаимодействий и связей как между базовыми типами компонентов,
    так и между компонентами и внешними элементами. К ним относятся:

    - Фрагменты (Fragments) – части пользовательского интерфейса в Операциях (см. выше);
    - Виды (Views) – элементы пользовательского интерфейса, отображаемые на экране, например, кнопки, списки и т. д.;
    - Макеты (Layouts) – определяют элементы пользовательского интерфейса, их свойства и расположение;
    - Намерения (Intents) – соединяют вместе различные компоненты приложения
      или связывают друг с другом работу разных приложений;
    - Ресурсы (Resources) – внешние элементы, такие, как строки, константы или изображения;
    - Манифест (Manifest) – конфигурационный файл приложения.



                            Опыт пользователя мобильного приложения

    В большинстве случаев настольные приложения имеют единую точку входа с рабочего стола или программы запуска,
    а затем запускаются как единый монолитный процесс. Приложения на Android имеют гораздо более сложную структуру.
    Типичное приложение для Android содержит несколько компонентов приложения,
    включая Activities, Fragments, Services, ContentProviders и BroadcastReceivers.

    Вы объявляете все или некоторые из этих компонентов приложения в манифесте приложения.
    Затем ОС Android использует этот файл, чтобы решить, как интегрировать ваше приложение
    в общий пользовательский интерфейс устройства. Учитывая, что правильно написанное приложение Android
    содержит несколько компонентов, и пользователи часто взаимодействуют с несколькими приложениями
    за короткий промежуток времени, приложения должны адаптироваться к различным типам рабочих процессов и задач,
    управляемых пользователями.

    Например, рассмотрим, что происходит, когда вы делитесь фотографией в своем любимом приложении для социальных сетей:

    - 1. Приложение вызывает намерение (Intent) камеры. Android запускает приложение камеры для обработки запроса.
         На данный момент пользователь покинул приложение для социальных сетей.
    - 2. Приложение камеры может вызывать другие намерения, например запуск средства выбора файлов,
         которое может запустить еще одно приложение.
    - 3. В конце концов, пользователь возвращается в приложение социальной сети и делится фотографией.

    В любой момент процесса пользователь может быть прерван телефонным звонком или уведомлением.
    После действия, связанного с этим прерыванием, пользователь ожидает, что сможет вернуться
    и возобновить этот процесс обмена фотографиями. Такое поведение переключения приложений распространено
    на мобильных устройствах, поэтому ваше приложение должно правильно обрабатывать эти моменты (задачи).

    Помните, что мобильные устройства также ограничены в ресурсах, поэтому в любой момент
    операционная система может уничтожить некоторые процессы приложения, чтобы освободить место для новых.

    Учитывая условия этой среды, компоненты вашего приложения могут запускаться по отдельности и не по порядку,
    а операционная система или пользователь могут уничтожить их в любое время.
    Поскольку эти события не находятся под вашим контролем, вы не должны хранить какие-либо данные
    или состояния в ваших компонентах приложения, и ваши компоненты приложения не должны зависеть друг от друга.


                                        Общие архитектурные принципы

    Если вы не должны использовать компоненты приложения для хранения данных и состояния приложения,
    как вы должны разрабатывать свое приложение?

    Разделение ответственности

    Самый важный принцип, которому нужно следовать, — это разделение ответственности.
    Распространена ошибка, когда вы пишете весь свой код в Activity или Fragment.
    Это классы пользовательского интерфейса которые должны содержать только логику обрабатывающую
    взаимодействие пользовательского интерфейса и операционной системы. Как можно больше разделяя ответственность
    в этих классах (SRP), вы можете избежать многих проблем, связанных с жизненным циклом приложения.

    Управление пользовательским интерфейсом из модели

    Другой важный принцип заключается в том, что вы должны управлять своим пользовательским интерфейсом из модели,
    предпочтительнее из постоянной модели. Модели — это компоненты, которые отвечают за обработку данных для приложения.
    Они не зависят от объектов View и компонентов приложения, поэтому на них не влияют жизненный цикл приложения
    и связанные с ним проблемы.

    Постоянная модель идеально подходит по следующим причинам:

    Ваши пользователи не потеряют данные, если ОС Android уничтожит ваше приложение, чтобы освободить ресурсы.
    Ваше приложение продолжает работать в тех случаях, когда сетевое соединение нестабильно или недоступно.

    Организовывая основу вашего приложение на модельных классах с четко определенной ответственностью
    по управлению данными, ваше приложение становится более тестируемым и поддерживаемым.


                                Рекомендуемая архитектура приложения

    Примечание. Невозможно иметь один способ написания приложений, который лучше всего подходит для каждого сценария.
    При этом рекомендованная архитектура является хорошей отправной точкой для большинства ситуаций и рабочих процессов.
    Если у вас уже есть хороший способ написания приложений для Android, соответствующий общим архитектурным принципам,
    менять его не стоит.

    Представьте, что мы создаем пользовательский интерфейс, который показывает профиль пользователя.
    Мы используем приватный API и REST API для извлечения данных профиля.


                                             Обзор

    Для начала рассмотрим схему взаимодействия модулей архитектуры готового приложения:


                                       Activity/Fragment
                                               |
                                               v
                            ViewModel (LiveData1....LiveData3...)
                                               |
                                               v
                                    ------Repository------
                                   |                      |
                                   v                      v
                                 Model            Remote Data Source
                                (Room)               (Retrofit)
                                   |                      |
                                SqlLite               Webservice


    Обратите внимание, что каждый компонент зависит только от компонента на один уровень ниже его.
    Например, Activity и Fragments зависят только от модели представления.
    Repository является единственным классом, который зависит от множества других классов;
    в этом примере хранилище зависит от постоянной модели данных и удаленного внутреннего источника данных.


    Этот дизайн паттерн создает последовательный и приятный пользовательский опыт.
    Независимо от того, вернется пользователь к приложению через несколько минут после его закрытия
    или спустя несколько дней, он мгновенно увидит информацию пользователя о том, что приложение сохраняется локально.
    Если эти данные устарели, модуль хранилища приложения начинает обновлять данные в фоновом режиме.



                                Структура Android-приложения

    Android-приложения могут быть простыми и сложными, но строение приложений всегда будет одинаковым.
    Есть обязательные элементы приложений, а есть опциональные, которые используются по мере необходимости.
    Android-приложение состоит из нескольких основных компонентов:
    манифест приложения, набор различных ресурсов и исходный код программы.

    Следующая таблица демонстрирует обязательные и возможные составляющие структуры Android-приложения:

        Название	            Описание	                                                        Необходимость
        gen	                    Файлы, сгенерированные самой Java.
                                Здесь находится такой важный файл как R.java	                        Да
        AndroidManifest.xml	    Файл манифеста AndroidManifest.xml предоставляет
                                системе основную информацию о программе.
                                Каждое приложение должно иметь свой файл манифеста	                    Да
        src	                    Каталог, в котором содержится исходный код приложения	                Да
        assets	                Произвольное собрание каталогов и файлов	                            Нет
        res	                    Каталог, содержащий ресурсы приложения.
                                В данном каталоге могут находиться подпапки:
                                drawable, anim, layout, menu, values, xml и raw                         Да



                                                Эмулятор.


    Эмулятор Android – это важный инструмент разработчика. Необходимо изучить его особенности и
    использовать его на начальном этапе разработки. Однако, следует помнить, что эмулятор лишь моделирует
    общее поведение реального устройства. Поэтому окончательное тестирование необходимо проводить на настоящем телефоне.

    Эмулятор создается при помощи Android Virtual Device Manager (AVD Manager). Создавая новое виртуальное устройство,
    в окне свойств можно задать произвольное название для эмулятора, указать версию API и установить
    остальные параметры (например, разрешение, плотность пикселей на экране, емкость SD-карты и другие).

    С помощью эмулятора можно иметь полноценный доступ к интернету, настраивать скорость и латентность соединения.
    Также можно имитировать входящие и исходящие телефонные звонки и SMS-сообщения. Но в то же время эмулятор
    не поддерживает виброзвонок, светодиоды, камеру, акселерометр и работу с компасом.



 */

}
