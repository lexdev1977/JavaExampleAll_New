package Android;

public class Android_Resources_Res_Assets {
 /*

                                            Получения ID ресурса

    Context context = MainActivity.this;    // создание контекста
    Resources res = context.getResources();  // создание ресурса
    int resourceId = res.getIdentifier("nameResource", "raw", context.getPackageName()); // получение id ресурса
    textView.setText(String.valueOf(soundId));  //  перевод в String и передача во View

    значение ID для не найденного ресурса будет - 0



                                            Resources (Ресурсы)

    В Android принято хранить такие объекты, как изображения, строковые константы, цвета, анимацию,
    стили и тому подобное, за пределами исходного кода. Система поддерживает хранение ресурсов во внешних файлах.
    Внешние ресурсы легче поддерживать, обновлять и редактировать.

    В основном, ресурсы хранятся в виде XML-файлов в каталоге res с подкаталогами values, drawable-ldpi, drawable-mdpi,
    drawable-hdpi, layout. Но также бывают еще два типа ресурсов: raw и assets.

    Для удобства система создает идентификаторы ресурсов и использует их в файле R.java
    (класс R, который содержит ссылки на все ресурсы проекта), что позволяет ссылаться на ресурсы внутри кода программы.
    Статический класс R генерируется на основе заданных ресурсов и создается во время компиляции проекта.
    Так как файл R генерируется автоматически, то нет смысла его редактировать вручную,
    потому что все изменения будут утеряны при повторной генерации.

    В общем виде ресурсы представляют собой файл (например, изображение) или значение (например, заголовок программы),
    связанные с создаваемым приложением. Удобство использования ресурсов заключается в том,
    что их можно изменять без повторной компиляции или новой разработки приложения.

    Самыми распространенными ресурсами являются, пожалуй, строки (string), цвета (color) и графические рисунки (bitmap).

    В следующей таблице перечислены основные ресурсы Android-приложения:

    Тип ресурса	        Размещение	        Описание
    Цвета	            /res/colors/	    Идентификатор цвета, указывающий на цветовой код.
    Строки	            /res/strings/	    Строковые ресурсы. В их число также входят строки в формате java и html.
    Меню	            /res/menus/	        Меню в приложении можно задать как XML-ресурсы.
    Параметры	        /res/values/	    Представляет собой параметры или размеры различных элементов.
    Изображения	        /res/drawable/	    Ресурсы-изображения. Поддерживает форматы JPG, GIF,
                                            PNG (самый предпочтительный) и другие. Каждое изображение является
                                            отдельным файлом. Система также поддерживает stretchable images,
                                            в которых можно менять масштаб отдельных элементов,
                                            а другие элементы оставлять без изменений.
    Отрисовываемые      /res/values/        Представляет цветные прямоугольники, которые используются в качестве фона
    цвета               или                 основных отрисовываемых объектов, например точечных рисунков.
                        /res/drawable/
    Анимация	        /res/anim/	        Android может выполнить простую анимацию на графике
                                            или на серии графических изображений.
    Произвольные        /res/xml/	        В Android в качестве ресурсов могут использоваться произвольные XML-файлы.
    XML-файлы
    Произвольные  	    /res/raw/	        Любые не скомпилированные двоичные или текстовые файлы: музыка, видео...
    необработанные
    ресурсы


    Помимо изображений в каталоге res/drawable могут храниться ресурсы простых геометрических фигур.
    Вот лишь некоторые из возможных атрибутов:

    - android:shape задает тип фигуры: rectangle (прямоугольник), oval (овал), line (линия), ring (окружность);
    - <corners> создает закругленные углы для прямоугольника;
    - <gradient> задает градиентную заливку для фигуры; в Android можно создавать три типа градиентов: Linear (линейный),
      Radial (радиальный) и Sweep (разверточный);
    - <size> задает размеры фигуры;
    - <solid> задает сплошной цвет для фигуры.

    Анимация в Android бывает двух видов:

    - Frame Animation – кадровая анимация, традиционная анимация при помощи быстрой смены последовательных изображений,
    как на кинопленке.
     - Tween Animation – анимация преобразований может выполняться в виде ряда простых преобразований:
    изменение позиции (класс TranslateAnimation), размера (ScaleAnimation), угла вращения (RotateAnimation)
    и уровня прозрачности (AlphaAnimation). Команды анимации определяют преобразования, которые необходимо
    произвести над объектом. Преобразования могут быть последовательными или одновременными.
    Последовательность команд анимации определяется в XML-файле (предпочтительно) или в программном коде.


                                                 Assets

    В Android имеется еще один каталог, в котором моrут храниться файлы,
    предназначенные для включения в пакет – /assets. Это не ресурсы, а просто необработанные файлы.
    Этот каталог находится на том же уровне, что и /res. Для файлов, располагающихся в /assets,
    в R.java не генерируются идентификаторы ресурсов. Для их считывания необходимо указать путь к файлу.
    Путь к файлу является относительным и начинается с /assets. Этот каталог, в отличие от подкаталога res/,
    позволяет задавать произвольную глубину подкаталогов и произвольные имена файлов.

    Для добавления паки assets в Android Studio нажмем на каталог app и в появившемся контекстном меню
    выберем New -> Directory:    https://disk.yandex.com/i/khcFphYcQfqG6g

    Затем в появившемся окошке выберем пункт src\main\assets и нажмем на Enter для ее добавления в проект:
    https://disk.yandex.com/i/ESXNljwOD5uteQ

    В типичном проекте Android Studio у вас будет app/ модуль с main/ sourceset (app/src/main/ от корня проекта),
    и поэтому ваши основные активы перейдут в app/src/main/assets/.
    Однако:

    - Если вам нужны активы, специфичные для сборки, такие как debug versus release,
    вы можете создать набор источников для этих ролей (например, app/src/release/assets/)

    - В ваших продуктах также могут быть источники с активами (например, app/src/googleplay/assets/)

    - В ваших контрольно-измерительных тестах может быть набор androidTest с пользовательскими активами
    (например, app/src/androidTest/assets/), хотя не забудьте запросить InstrumentationRegistry для getContext(),
    а не getTargetContext() для доступа к этим активам

    Assets(активы) доступны только для чтения во время выполнения. Используйте внутреннее хранилище,
    внешнее хранилище или систему доступа к хранилищу для чтения/записи содержимого.


                                            Отличие Res от Assets

    - assets: Разработчик может назвать имя файла любым способом, например, заглавными буквами (имя файла)
      или пробелом (имя файла).
    - res / raw: В этом случае имя файла ограничено. Имена ресурсов на основе файлов должны содержать
      только строчные буквы a-z, 0-9 или подчеркивание.


    - assets:  можно создавать подкаталоги
    - res / raw: файлы могут находиться только в корневой папке.


    - assets.open (“имя файла”) Если имя файла не существует, нам нужно его поймать.
    - проверка имени во время компиляции у res / raw: resources.openRawResource(R.raw.filename)


    - Если разработчик хочет перечислить все файлы в папке assets, он /использует функцию list ()
      и укажите имя папки или ” “ в корневой папке, как указано ниже:                                                                                    *//**

        assets.list (FOLDER_NAME)?.forEach {
        println (it)
        }                                                                                                                                                                   *//*
    - Это невозможно. Разработчик должен знать имя файла во время разработки, а не во время выполнения.

    Таким образом, в assets можно прочитать имя файла во время выполнения, перечислить их и использовать
    их динамически. В res / raw нужно закодировать их готовыми, возможно, в файле string resources.


    Имя файла, доступное из XML: (возможно в res / raw)
    - assets: Нет простого способа, которым разработчик может организовать XML-файл (например AndroidManifest.xml ),
      чтобы указать на файл в папке assets.
    - res / raw: В любых XML-файлах, таких как Java, разработчик может легко получить доступ к файлу в res / raw,
      используя @raw/filename .













  */



}
