package Maven;

public class Maven_General {
/*
                                                                                                                                            *//**
    <!-- сайт с репозиторием -  https://mvnrepository.com/                                                                                               *//*

    Apache Maven - это открытый фреймворк, построенный на стандартах разработки проектов,
    который упрощает сборку, тестирование, отчетность и запаковку проектов.

    Выписка:

                                Что такое сборка проекта, автоматизация сборки?
    Сборка (англ. assembly) - двоичный файл, содержащий исполняемый код программы или другой,
    подготовленный для использования информационный продукт.
    Сборка проекта - это, в том числе процесс создания необходимого двоичного файла.

    Автоматизация сборки - этап написания скриптов или автоматизация широкого спектра задач применительно к ПО,
    применяемому разработчиками в их повседневной деятельности, включая такие действия, как:

    - Компиляция исходного кода в бинарный код
    - Сборка бинарного кода
    - Выполнение тестов
    - Разворачивание программы на производственной платформе
    - Написание сопроводительной документации или описание изменений новой версии


                               Что такое Maven? Как он работает?
    Apache Maven - это Java фреймворк для автоматизации сборки проектов, компиляции, создания jar,
    создания дистрибутива программы, генерации документации.

    Если собирать большие проекты с командной строки, то команда для сборки будет очень длинной,
    поэтому её иногда записывают в bat/sh скрипт. Но такие скрипты зависят от платформы.
    Для того чтобы избавиться от этой зависимости и упростить написание скрипта,
    используют инструменты для сборки проекта.

    Maven обеспечивает декларативную, а не императивную сборку проекта.
    То есть, в файлах проекта pom.xml содержится его описание, а не отдельные команды.
    Все задачи по обработке файлов в Maven выполняется через плагины.


                                Какими аспектами управляет Maven?
    Вот основные аспекты, которыми позволяет управлять Maven:

    - Создание (Build)
    - Документирование (Documentation)
    - Отчёты (Reporting)
    - Зависимости (Dependencies)
    - Релизы (Releases)
    - Системы контроля версий (SCM)
    - Список рассылки (Mailing list)
    - Дистрибьюция (Distribution)


    Версию можно узнать с помощью следующей команды:
    - mvn --version

                                     Для чего был создан Maven?
    Основной целью Maven является предоставление разработчику:

    Понятной модели для проектов, которая может быть использована повторно и была бы проста в поддержании.
    Плагинов, которые могут взаимодействовать с этой моделью.
    Структура и содержание проекта Maven указывается в специальном xml-файле,
    который назывется Project Object Model (POM), который является базовым модулем всей системы.



                                    Какая структура каталогов в Maven?
    В Maven стандартная структура каталогов, благодаря ей отпадает необходимость прописывать пути к файлам проекта.
    В корневом каталоге проекта находится pom.xml и несколько текстовых файлов.
    Всё остальное хозяйство аккуратно разложено в подкаталогах.
    Главные из них - src и target. Однако, порядок сохраняется и вглубь:

    src/main/java	    Application/Library sources	    исходный код приложения или библиотеки
    src/main/resources	Application/Library resources	ресурсы приложения или библиотеки
    src/main/filters	Resource filter files	        файлы с параметрами фильтрации ресурсов
    src/main/webapp	    Web application sources	        исходный код веб-приложения
    src/test/java	    Test sources	                исходный код тестов (юнит-тестов)
    src/test/resources	Test resources	                ресурсы юнит тестов
    src/test/filters	Test resource filter files	    файлы с параметрами фильтрации ресурсов для тестов
    src/it	            Integration Tests
                        (primarily for plugins)	        интеграционные тесты (в основном для плагинов)
    src/assembly	    Assembly descriptors	        дескрипторы сборки
    src/site	        Site	                        вебсайт приложения (документация)
    LICENSE.txt	        Project's license	            лицензионное соглашение проекта
    NOTICE.txt	        Notices and attributions        замечания и необходимые атрибуты библиотек, от зависит проект
                        required by libraries
                        that the project depends on
    README.txt	        Project's readme	            краткое описание проекта

    Где хранятся файлы классов при компиляции проекта Maven?
    Файлы классов хранятся в: ${basedir}/target/classes/.



    - Зависимости, добавляются в pom.xml (Project Object Model), строки для зависимости можно скопировать в репозитории,
    в описании зависимости вставляются между тегами -  <dependencies></dependencies>

       например:
                                                                                                                   *//**
        <dependencies>
        <!-- https://mvnrepository.com/artifact/junit/junit -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>


    - Артефакт (artefact) - это, по сути, любая библиотека, хранящаяся в репозитарии (месте хранения).
    Это может быть какая-то зависимость или плагин.
    Обычно артефактом является JAR-файл, который хранится в репозитарии Maven.
    Каждый артефакт содержит group ID, artifact ID и версию.

    - Зависимость (dependency) - это те библиотеки, которые непосредственно используются в вашем проекте
    для компиляции кода или его тестирования.

    - Плагин (plugin) - это зависимости Maven'а, расширяющие его функционал.

    - Задача (goal) - это специальная задача, которая относится к сборке проекта и его управлению.
    Она может привязываться как к нескольким фазам, так и ни к одной.
    Задача, которая не привязана ни к одной фазе, может быть запущена вне фаз сборки с помощью прямого вызова.

    - Архетип (archetype) - это некая стандартная компоновка файлов и каталогов в проектах различного рода
    (веб, swing-проекты и прочие). Другими словами, Maven знает, как обычно строятся проекты
    и в соответствии с архетипом создает структуру каталогов.


    - Репозиторий (repository) - глобальное хранилище всех библиотек, доступных для Maven,
    это место где хранятся артефакты: jar файлы, pom-файлы, javadoc, исходники, плагины.                            *//*

    В Maven существуют три типа репозиториев:

    - Локальный (local) репозиторий - это директория, которая хранится на нашем компьютере.
    Она создаётся в момент первого выполнения любой команды Maven. По умолчанию она расположена
    в <home директория>/.m2/repository - персональная для каждого пользователя.
    Фактически она является кэшем для центрального и удалённого репозиториев.

    - Центральный (central) репозиторий - это репозиторий, который обеспечивается сообществом Maven.
    Он содержит огромное количество часто используемых библиотек.
    Расположен по адресу http://repo1.maven.org/maven2/ и доступен на чтение для всех пользователей в интернете.
    Если Maven не может найти зависимости в локальном репозитории, то автоматически начинается поиск
    необходимых файлов в центральном репозитории. Для поиска по центральному репозиторию
    можно использовать сайт https://mvnrepository.com/

    - Удалённый (remote) репозиторий. Иногда Maven не может найти необходимые зависимости в центральном репозитории,
    например при отсутствии интернета. В этом случае процесс сборки прерывается,
    и в консоль выводится сообщение об ошибке. Для того, чтобы предотвратить подобную ситуацию,
    в Maven предусмотрен механизм удалённого репозитория, который является репозиторием,
    определённым самим разработчиком. Там могут храниться все необходимые зависимости.
                                                                                                                   *//**
    - mvn install - устанавливает JAR-файл в локальное хранилище (репозиторий)
    - mvn site - создает веб-сайт проекта
    - mvn clean - эта команда очищает целевую директорию от созданных в процессе сборки файлов.
                                                                                                                    *//*

                                Какой порядок поиска зависимостей Maven?
    Когда мы выполняем сборку проекта в Maven,
    автоматически начинается поиск необходимых зависимостей в следующем порядке:

    - 1. Поиск зависимостей в локальном репозитории. Если зависимости не обнаружены, происходит переход к шагу 2.
    - 2. Поиск зависимостей в центральном репозитории. Если они не обнаружены и удалённый репозиторий определён,
    то происходит переход к шагу 4.
    - 3. Если удалённый репозиторий не определён, то процесс сборки прекращается и выводится сообщение об ошибке.
    - 4. Поиск зависимостей на удалённом репозитории, если они найдены, то происходит их загрузка в локальный репозиторий,
    если нет - выводится сообщение об ошибке.

                                       Что такое pom.xml?

    - pom.xml - это XML-файл, который содержит информацию о конфигурации и деталях проекта,
    используемых при создании проекта на Maven. Он всегда находится в базовом каталоге проекта.
    Этот файл также содержит описание задач, список и параметры плагинов.

    Во время выполнения задач, Maven ищет файл pom.xml в базовой директории проекта.
    Он читает его и получает необходимую информацию, после чего выполняет задачи.

    Корневой элемент <project> содержит ссылку на схему XML, которая облегчает редактирование и проверку pom.xml:
                                                                                                                   *//**
    <project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
                                                                                                                    *//*
    Внутри тега project содержится основная и обязательная информация о проекте.


                                Какую информацию содержит pom.xml?

    Среди информации которую содержит pom.xml, мы можем выделить следующие блоки:

    - Зависимости проекта (project dependencies)
    - Плагины (plugins)
    - Задачи/цели (goals)
    - Профиль создания (build profiles)
    - Версия проекта (project version)
    - Разработчики (developers)
    - Список рассылки (mailing list)

    Что такое супер POM?
    Все POM-файлы являются наследниками родительского pom.xml.
    Этот POM-файл называется Super POM и содержит значения, унаследованные по умолчанию.

    Какие элементы необходимы для минимального POM?
    Обязательные элементы для минимального POM это корневой элемент, modelVersion, GroupID, artifactID и версия.
    Минимальный POM файл:
                                                                                                                   *//**
    <project>
      <modelVersion>4.0.0</modelVersion>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>my-project</artifactId>
      <version>1.0</version>
    </project>                                                                                                      *//*


                        Что такое жизненный цикл сборки в Maven?
    Жизненный цикл сборки (Lifecycle) - это чётко определённая последовательность фаз,
    во время выполнения которых должны быть достигнуты определённые цели.
    Здесь фаза представляет собой стадию жизненного цикла.

    Когда Maven начинает сборку проекта, он проходит через определённую последовательность фаз сборки,
    и выполняет определенные задачи, которые указаны в каждой из фаз.

    В Maven есть следующие три стандартных жизненных цикла:

    - Очистка (clean) - очищает артефакты, созданные до сборки.
    - Сборка (default or build) - используется для создания приложения.
    - Создание сайта проекта (site) - генерирует документацию сайта для проекта.

    Жизненный цикл сборки Clean состоит из следующих этапов:

    - pre-clean
    - clean
    - post-clean


                    Из каких фаз состоит жизненный цикл сборки Default (Build)?

    Default (Build) - это основной жизненный цикл Maven, который используется для сборки проектов.
    Он включает в себя следующие фазы:

    - validate - проверяет корректность метаинформации о проекте, подтверждает,
    является ли проект корректным и вся ли необходимая информация доступа для завершения процесса сборки.
    - initialize - инициализирует состояние сборки, например, различные настройки.
    - generate-sources - включает любой исходный код в фазу компиляции.
    - process-sources - обрабатывает исходный код (подготавливает). Например, фильтрует определённые значения.
    - generate-resources - генерирует ресурсы, которые должны быть включены в пакет.
    - process-resources - копирует и отправляет ресурсы в указанную директори. Это фаза перед упаковкой.
    - compile - комплирует исходный код проекта.
    - process-classes - обработка файлов, полученных в результате компляции.
    Например, оптимизация байт-кода Java классов.
    - generate-test-sources - генерирует любые тестовые ресурсы, которые должны быть включены в фазу компиляции.
    - process-test-sources - обрабатывает исходный код тестов. Например, фильтрует значения.
    - test-compile - компилирует исходный код тестов в указанную директорию тестов.
    - process-test-classes - обрабатывает файлы, полученные в результате компиляции исходного кода тестов.
    - test - запускает тесты классов, используя приемлемый фреймворк юнит-тестирования (например, Junit).
    - prepare-package - выполняет все необходимые операции для подготовки пакета, непосредственно перед упаковкой.
    - package - преобразует скомпилированный код и пакет в дистрибутивный формат. Такие как JAR, WAR или EAR.
    - pre-integration-test - выполняет необходимые действия перед выполнением интеграционных тестов.
    - integration-test - обрабатывает и распаковывает пакет, если необходимо, в среду,
    где будут выполняться интеграционные тесты.
    -post-integration-test - выполняет действия, необходимые после выполнения интеграционных тестов.
    Например, освобождение ресурсов.
    - verify - выполняет любые проверки для подтверждения того, что пакет пригоден и отвечает критериям качества.
    - install - переносит пакет в локальный репозитарий, откуда он будет доступен для использования
    как зависимость в других проектах.
    - deploy - копирует финальный пакет (архив) в удалённый репозитарий для, того,
    чтобы сделать его доступным другим разработчикам и проектам.

    !!! Здесь также необходимо уточнить два момента:

    Когда мы выполняем команду Maven, например install, то будут выполнены фазы до install и фаза install.
    Различные задачи Maven будут привязаны к различным фазам жизненного цикла Maven
    в зависимости от типа архива (JAR/WAR/EAR).


                        !!! Альтернативная выписка по жизненному циклу и фазам!!!
                                                                                                                   *//**
    Процесс построения приложения называют жизненным циклом Maven-проекта, и состоит он из фаз (phase).
    Посмотреть на них ты можешь в IDEA, нажав на Maven>example>Lifecycle в правом верхнем углу:

    Cуществует 9 фаз:

        - 1. clean — удаляются все скомпилированные файлы из каталога target
             (место, в котором сохраняются готовые артефакты);
        - 2. validate — идет проверка, вся ли информация доступна для сборки проекта;
        - 3. compile — компилируются файлы с исходным кодом;
        - 4. test — запускаются тесты;
        - 5. package — упаковываются скомпилированные файлы (в jar, war и т.д. архив);
        - 6. verify — выполняются проверки для подтверждения готовности упакованного файла;
        - 7. install — пакет помещается в локальный репозиторий.
             Теперь он может использоваться другими проектами как внешняя библиотека;
        - 8. site — создается документация проекта;
        - 9. deploy — собранный архив копируется в удаленный репозиторий.

        Все фазы выполняются последовательно: нельзя запустить, скажем, четвертую фазы, пока не завершены фазы 1-3.

        До запуска package выполняются фазы validate, compile, test. Исключение — фаза clean.
        Ее желательно вызывать перед каждой новой сборкой проекта. Фазы можно перечислить через пробел:

        mvn clean package.

    Также у каждой фазы есть пре- и пост-фазы: например, pre-deploy, post-deploy, pre-clean, post-clean,
    но используются они довольно редко.

    Кроме этого, у каждой фазы есть цели (goal). Стандартные цели заложены по умолчанию,
    дополнительные добавляются Maven-плагинами.

    Чтобы добавить Мавен-плагин в проект, его описание, аналогично зависимостям,
    нужно поместить в pom.xml в тег <build> и <plugins>.
                                                                                                                    *//*


                    Из каких фаз состоит жизненный цикл сборки Site?

    Жизненный цикл сборки Site состоит из следующих этапов:

        - pre-site
        - site
        - post-site
        - site-deploy


                Что сделает команда "mvn clean dependency:copy-dependencies package"?

    Порядок выполнения зависит от порядка вызова целей и фаз. Рассмотрим данную команду:

    mvn clean dependency:copy-dependencies package
    Аргументы clean и package являются фазами сборки, в то время как “dependency:copy-dependencies” является задачей.

    В этом случае сначала будет выполнена фаза clean,
    после этого будет выполнена задача “dependency:copy-dependencies”.
    После чего будет выполнена фаза package.


                            Что такое профиль сборки (Build Profile)?
    Профиль сборки - это множество настроек, которые могут быть использованы для установки
    или перезаписи стандартных значений сборки Maven.

    Используя профиль сборки Maven, мы можем настраивать сборку для различных окружений,
    таких как Development или Production.

    Профили настраиваются в файле pom.xml с помощью элементов
    activeProfiles / profiles и запускаются различными методами.

    В Maven существует три основных типа профилей сборки:

    - Per Project - определяется в POM файле, pom.xml
    - Per User - определяется в настройках Maven - xml файл (%USER_HOME%/.m2/settings.xml).
    - Global - определяется в глобальных настройках - xml файл (%M2_HOME%/conf/settings.xml).

    Профиль сборки Maven может быть активирован различными способами:

    - использованием команды в консоли
    - с помощью настроек Maven
    - с помощью переменных окружения
    - в настройках ОС
    - существующими или отсутствующими файлами


                                Для чего используются Maven плагины?
    Maven плагины используются для:

    - создания jar–файла
    - создания war–файла
    - компиляции кода файлов
    - юнит-тестирования кода
    - создания отчётов проекта
    - создания документации проекта

    В Maven существует два типа плагинов:

    Плагины сборки (Build plugins) - выполняются в процессе сборки и должны быть конфигурированы внутри блока
    <build></build>
    файла pom.xml.

    Плагины отчётов (Reporting plugins) - выполняются в процессе генерирования сайта
    и должны быть сконфигурированы внутри блока
    <reporting></reporting>
    файла pom.xml.

                            Когда Maven использует внешние зависимости?
    Если необходимые файлы не найдены ни в центральном, ни на удалённом репозитории,
    тогда для решения этой проблемы используются внешние зависимости.

                            Что нужно определить для внешней зависимости?
    Внешние зависимости могут быть сконфигурированы в файле pom.xml таким же образом,
    как и другие зависимости, для этого нужно:

    - определить groupId таким же именем, как и имя файла
    - определить artifactId таким же именем, как и имя файла
    - определить область видимости зависимости как system
    - указать абсолютный путь к файлу

                            Какая команда создает новый проект на основе архетипа?
    Переходим в нужную нам директорию и выполняем в терминале следующую команду:

    - mvn archetype:generate

                                    Что такое SNAPSHOT в Maven?
    SNAPSHOT - это специальная версия, которая показывает текущую рабочую копию.
    При каждой сборке Maven проверяет наличие новой snapshot версии на удалённом репозитории.

                                В чем разница между snapshot и версией?
    В случае с обычной версией, если Maven однажды загрузил версию data-service:1.0,
    то он больше не будет пытаться загрузить новую версию 1.0 из репозитория.
    Для того, чтоб скачать обновлённый продукт data-service должен быть обновлён до версии 1.1.

    В случае со snapshot, Maven автоматически будет подтягивать крайний snapshot (data-service:1.0-SNAPSHOT) каждый раз,
    когда будет выполняться сборка проекта.


                                Что такое транзитивная зависимость в Maven?
    Транзитивная зависимость - позволяет избегать необходимости изучать и указывать библиотеки,
    которые требуются для самой зависимости, и включает их автоматически.
    Необходимые библиотеки подгружаются в проект автоматически.
    При разрешении конфликта версий используется принцип «ближайшей» зависимости, то есть выбирается зависимость,
    путь к которой через список зависимых проектов является наиболее коротким.


                        Как Maven определяет, какую версию зависимостей использовать,
                        когда встречается множественный вариант выбора?

    Dependency mediation - определяет, какая версия зависимости будет использоваться,
    когда встречается несколько версий артефактов. Если две версии зависимости на той же глубине в дереве зависимостей,
    то будет использоваться та которая объявлена первой. Здесь важен порядок объявления: первое объявление выигрывает.

    Что такое область видимости зависимостей (dependency scope)?
    Существуют следующие области видимости зависимостей:

    - compile - это область по умолчанию, используются, если ничего больше не определено.
    Compile зависимости доступны во всех classpath проекта.
    - provided - это очень похоже на compile, но указывает на то,
    что вы ожидаете от JDK или контейнера предоставить зависимость в ходе выполнения.
    Эта область доступна только на compilation и test classpath и не является транзитивной.
    - runtime - эта область указывает на то, что зависимость не обязательна для compilation, но для фаз выполнения.
    - test - эта область указывает, что зависимость не обязательна для нормального использования приложения.
    - system - эта область похожа на provided за исключением того, что вы предоставляете JAR.
    Артефакт всегда доступен и не смотрит в репозиторий.
    - import - эта область используется в зависимости типа pom в <dependencyManagement> разделе.
    Это указывает на то, что определенный POM будет заменен зависимостями в этом POM <dependencyManagement> разделе.


                        Какой минимальный набор информации нужен для составления ссылки зависимостей
                        в разделе dependencyManagement?

    Минимальный набор информации такой: {groupId, artifactId, type, classifier}.

    Как сослаться на свойство(property) определенное в файле pom.xml?
    На все свойства в pom.xml, можно сослаться с помощью префиксов “project.” или “pom.”
    Ниже приведён пример некоторых часто используемых элементов:

    ${project.build.directory} - “target” директория, или тоже самое ${pom.project.build.directory}
    ${project.build.outputDirectory} - путь к директории куда компилятор складывает файлы, по умолчанию “target/classes”
    ${project.name} или ${pom.name} - имя проекта
    ${project.version} или ${pom.version} - версия проекта
    Для чего нужен элемент <execution> в POM файле?
    Элемент <execution> содержит информацию, необходимую для выполнения плагина.

                            Каким образом можно исключить зависимость в Maven?
    Файл описания проекта предусматривает возможность исключить зависимость в случае обнаружения цикличности или
    отсутствия необходимости в определённой библиотеке. Зависимость может быть исключена используя элемент exclusion.

                                    Что является полным именем артефакта?
    <groupId>:<artifactId>:<version>

                    Если вы не определяете никакой информации, откуда ваш POM унаследует её?
    Все POM-ы наследуются от родителя, несмотря на то, определен ли он явно или нет.
    Это базовый POM известный как “супер POM”, он содержит значения, которые наследуются по умолчанию.

                При сборке проекта Maven постоянно проверяет наличие обновлений в интернете.
                Можете ли вы собрать проект без интернета?
    Да, можете, если в вашем локальном репозитарии есть все необходимые для сборки артефакты.

                Если при сборке проекта в тестах произошла ошибка, как собрать проект без запуска тестов?
    Для запуска сборки без выполнения тестов добавьте -Dmaven.test.skip=true к команде в строке запуска maven:

    mvn install -Dmaven.test.skip=true

                            Как запустить только один тест?
    Для запуска только одного теста добавьте -Dtest=[Имя класса] к команде в строке запуска maven.
    Например:

    mvn install -Dtest=org.apache.maven.utils.ConverterTest

                                                                                                                   *//**
                                Некоторые теги pom.xml:

    - project - описывает проект, это элемент верхнего уровня во всех файлах pom.xml
    - groupId - по-сути, это имя пакета. Полностью отражается в структуре каталогов (доменное имя своей компании)
    - artifactId - название проекта. В структуре каталогов не отображается
    - version - версия проекта
    - packaging - определяет, какой тип файла будет собран. Варианты: pom, jar, war, ear
    - dependencies - указываются зависимости
    - build - информация о сборке проекта
    - name - это уже необязательое описание проекта. В данном случае его название
    - description - элемент представляет собой общее описание проекта.
      Это часто используется в генерации документации Maven
    - url - интернет-страница проекта
    - repositories - репозитарии для артефактов
    - pluginRepositories - репозитарии для плагинов Maven                                                           *//*




                                    Из другой статьи выписки

                                * Стандартная структура папок

        Часто, когда мы начинаем работу над новым проектом, значительное количество времени тратится
    на принятии решения о планировке проекта и структуре папок, необходимых для хранения кода и конфигурационных файлов.
    Эти решения могут значительно отличаться у разных проектов и команд, что может осложнить новым сотрудникам
    понимание и восприятие проектов других команд. Это также может затруднить действующим разработчикам
    переключение между проектами и поиск интересующей их информации.

        Maven решает эти проблемы путем стандартизации структуры папок и внутреннего устройства проекта.
    Maven дает рекомендации, где должны находиться различные части проекта,
    такие как исходный код, код тестов и конфигурационные файлы. Например, Maven предполагает,
    что весь исходный код Java должен быть размещен в папке src\main\java.
    Всё это облегчает понимание и навигацию по любому проекту Maven.

        Кроме того, эти соглашения облегчают переход и начало использования новой IDE.
    Исторически у разных IDE структура проекта и имена папок различаются.
    Динамические веб-проекты в Eclipse могут использовать папку WebContent для хранения ресурсов проекта,
    в то время, как NetBeans для тех же целей может использовать папку с именем WebPages.
    С помощью Maven ваши проекты будут придерживаться определенной структуры и перестанут зависеть от IDE.


                            * Декларативное управление зависимостями

        Большинство проектов Java для правильного функционирования полагаются на другие проекты
    и фреймворки с открытым кодом. Ручное скачивание этих зависимостей и поддержка их версий
    при работе над проектом может оказаться довольно затруднительным делом.
    Maven предоставляет удобный способ объявить зависимости проекта в отдельном,
    внешнем файле с именем pom.xml. После чего Maven автоматически загружает эти зависимости
    и позволяет вам использовать их в своем проекте. Это значительно упрощает управление зависимостями проекта.
    Важно отметить, что в файле pom.xml вы указываете, что зависит, а не как.
    Кроме того, файл pom.xml выступает в качестве инструмента документирования,
    сообщая о зависимостях вашего проекта и его версии.


                            * Плагины

    Maven использует архитектуру, основанную на плагинах, что делает его легко расширяемым,
    а его функциональность – легко настраиваемой. Эти плагины инкапсулируют многократно используемые
    алгоритмы сборки и выполнения задач. Сегодня существуют сотни доступных Maven-плагинов,
    которые могут быть использованы для выполнения широкого круга задач,
    от компиляции кода до генерации проектной документации.
    Кроме того, Maven позволяет легко создавать свои собственные плагины,
    тем самым позволяя вам выполнять задачи и процессы, специфичные для вашей организации.


                            * Единая абстракция сборки

    Maven обеспечивает единый интерфейс для сборки проектов. Вы можете построить Maven-проект
    используя всего несколько команд. После того, как вы познакомитесь с процессом сборки Maven,
    вы без труда поймете, как строить и другие проекты Maven.
    Это освобождает разработчиков от необходимости изучать индивидуальные


                            * Поддержка инструментов

    Maven предоставляет мощный инструмент командной строки выполнения различных операций.
    Сегодня все основные IDE предоставляют прекрасную поддержку инструментов для Maven.
    В добавок, Maven полностью интегрирован с такими современными инструментами непрерывной разработки,
    как Jenkins, Bamboo, и Hudson.


                            * Архетипы

    Как мы уже упоминали, Maven обеспечивает стандартное расположение папок для своих проектов.
    Когда приходит время создавать новый проект Maven, вам приходится вручную создавать каждую папку,
    что может быстро стать утомительным. И это тот самый момент, когда архетипы Maven приходят на помощь.
    Архетипы Maven являются предопределенными шаблонами проектов, которые могут быть использованы
    для создания новых проектов. Проекты, созданные с помощью архетипов, будут содержать все папки и файлы,
    необходимые для работы.
    Кроме того, архетипы являются ценным инструментом для хранения лучших методик
    и совместных активов, которые будут нужны в каждом проекте.
    Архетипы также являются ценным инструментом для обобщения лучших практик и общих активов,
    которые вам понадобятся в каждом из ваших проектов. Представим себе команду,
    которая в основном работает над веб-приложениями, основанными на фрейморке Spring.
    Все веб-проекты на Spring используют общие зависимости и требуют схожего набора конфигурационных файлов Spring.
    Также весьма вероятно, что все эти веб-проекты будут иметь одинаковые
    конфигурационные файлы Log4j/Logback, CSS, изображений, шаблонов Apache Tile или декораторов SiteMesh.
    Maven позволит этой команде сгруппировать такие общеиспользуемые активы в единый архетип.
    И при создании новых проектов с использованием этого архетипа в них автоматически будут включены все общие активы.
    Никакого копирования и перетаскивания больше не понадобиться.



                            * Открытый исходный код

    Maven является открытым проектам и бесплатен для скачивания и использования.
    Он поставляется с обширной онлайн-документацией и поддерживается активным сообществом.
    Кроме того, такие компании, как Sonatype, предлагают поддержку экосистем Maven на платной основе.

                            СОГЛАШЕНИЕ ПО КОНФИГУРАЦИИ

    Соглашение по конфигурации (Convention Over Configuration, CoC) или кодирование по конвенции
    является одной из ключевых особенностей Maven. Ставшее известной благодаря сообществу Ruby on Rails,
    CoC основывается на важных умолчаниях, снижая количество решений, которые приходится принимать.
    Это экономит время и упрощает создание конечного продукта
    за счет радикального сокращения объёма требуемого конфигурирования.
    В рамках приверженности CoC, Maven обеспечивает несколько важных умолчаний,
    закладывая стандартную структуру папок и предоставляя значения по умолчанию для создаваемых сущностей.
    Например, взглянув на сущность с именем log4j-1.4.3.jar вы с первого взгляда легко поймёте,
    что это JAR-файл библиотеки журналирования log4j, версия 1.4.3.
    Одним из недостатков CoC Maven является жесткость, с которой сталкиваются использующие
    её конечные пользователи. Для решения этой проблемы у вас имеется возможность изменить большинство настроек Maven.
    Например, можно изменить в проекте расположение исходных кодов Java.
    Но, как правило, такие изменения следует сводить к минимуму

                            * Альтернативы Maven

    Несколько альтернатив: Ant + Ivy и Gradle.



















 */



}
