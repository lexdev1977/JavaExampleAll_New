package Glossary;

public class Library {
/*

    Библиотеки — это код, предназначенный для решения конкретной проблемы.

    Библиотека может быть использована в программном продукте просто как набор подпрограмм близкой функциональности,
    не влияя на архитектуру программного продукта и не накладывая на неё никаких ограничений.

    Главное достоинство библиотек в том, что они позволяют нам не изобретать велосипед всякий раз,
    когда мы пишем код. Используйте библиотеки — уже написанный для определённых задач код — как можно чаще!
    Вы сэкономите время. Серьезно, лучше потратить его на общение с семьей и друзьями.


                                   Объяснение библиотек на примере дома: (->FrameWorks)
     Продолжаем строительную аналогию. Допустим, с домом вы определились,
     но в нём теперь нужно сделать ремонт и провести электрику. Это можно сделать с помощью молотка,
     отвёртки, ручной дрели и зубила, а можно взять специальные инструменты — болгарку, перфоратор и шуруповёрт.
     Специнструменты — это и есть библиотеки. С ними задача решается быстрее, но чтобы ими пользоваться,
     нужно умение. Если задача простая и с ней действительно можно справиться только с молотком и отвёрткой
     — отлично, тогда нам не нужны библиотеки и достаточно встроенных средств языка программирования.

    Если расширить пример, то с помощью специнструмента можно даже построить дом: бетономешалка вместо ведра с лопатой,
    кран вместо ручной разгрузки и так далее. Получается, что написать программу можно с помощью фреймворка,
    а можно с помощью библиотеки. Библиотека тоже следит за тем, чтобы вы сделали как можно меньше ошибок,
    но нужно чётко знать все команды и правила. В итоге вы полностью контролируете процесс,
    но упрощаете себе жизнь, используя уже готовые библиотеки.

    Получается, что фреймворк от библиотеки отличается тем, что фреймворк сам задаёт вам правила игры,
    которые нужно соблюдать, а библиотеками вы командуете сами и используете их возможности в нужный момент.

    Примеры библиотек:

    - TensorFlow для Python, которая погружает вас в мир искусственного интеллекта
    - Almanac Converter — для простой работы с датами и временем
    - WebKit — популярнейшая библиотека для работы с веб-страницами
    - Scribe Java — простая библиотека для авторизации пользователей

    Мы сами решаем, как и когда вызывать библиотечные функции и что с ними делать.
    Библиотека — это просто набор заранее определённых функций, из которых,
    как из кирпичиков, можно складывать то, что нам нужно. Ещё одно интересное свойство:
    внутри фреймворка можно использовать другие библиотеки.
    Например, если вам нужен адаптивный сайт и удобная работа с формами — используйте Bootstrap
    для адаптива как фреймворк и подключите к нему библиотеку jQuery.



                                      * Стандартные библиотеки Java

    - java.lang. Эта библиотека всегда импортируется в любое Java-приложение, поскольку содержит всё то,
    без чего вы в принципе не сможете программировать (String, Double, Enum, Math и так далее).

    - В java.util вы можете найти все коллекции и структуры данных, доступные в Java.

    - Далее, у нас есть java.io для чтения файлов, работающих потоками, объектами класса Pipe и так далее.

    - О первых трёх вы, скорее всего, уже слышали. А вот с java.nio, альтернативой java.io, знают уже не все.
    Эта библиотека отвечает за неблокирующий ввод-вывод, позволяя,
    как вы могли догадаться, интенсивно использовать операции ввода-вывода.

    - java.net используется для работы с сокетами, создания подключений или коротких сетевых приложений.

    - В Java у нас также есть библиотеки для работы с GUI:
    javax.swing (довольно устаревшее расширение ещё более старого java.awt).

    - Мы даже можем воспроизводить музыку и создавать MIDI-файлы с помощью java.sound.



                                       * JHipster

    JHipster — это платформа для быстрого развертывания, разработки
    и создания масштабируемых веб-серверов с высокой нагрузкой и использованием самых современных
    и модных технологий таких как Spring, Spring-MicroServices, Netflix,Docker,
    Kubernetes, AngularJs, Liquibase, MongoDB, Cassandra, ElasticSearch.

    Этот инструмент — практически незаменим для генерирования эскиза проекта распределенного веб-сервера.
    Он умеет генерировать pom-файл с зависимостями, настраивать Elastic Search и Connection,
    вам остается только добавить бизнес-логику архитектуры. Основными и наиболее важными библиотеками,
    включенными в сгенерированный проект, являются:

    - Spring Boot — помогает ускорить и облегчить разработку приложений
    - Angular/ AngularJS - инфраструктура JavaScript



                                       * Maven

    Maven — один из трёх самых популярных инструментов для сборки проектов на Java.
    Он отвечает за компиляцию, создание jar-файлов (Java-архивов),
    создание дистрибутива программы, генерацию документации.

    Каждый современный проект состоит из разных файлов, модулей, технологий.
    Говоря очень просто, сборка проекта — подготовка его «рабочей» версии, то есть той программы,
    которую можно запустить на выполнение. Это можно делать «ручками», в командной строке,
    а можно написать специальные скрипты. Однако гораздо легче это проделывать с помощью специальных приложений.
    Называются они «системы автоматической сборки».

    * Maven — одна из трёх таких программ, две другие — Gradle и Ant.

    На вход такие системы получают исходники проекта, а на выход выдают программу, которую можно запустить.

    Структура проекта (зависимости, конфигурации, документация) описывается в файле pom.xml
    (POM – Project Object Model), который должен находиться в корневой папке проекта.



                                       * Apache Commons

    Apache Commons — фактически целый проект, ориентированный на создание библиотек Java.
    Или «большой набор маленьких Java-утилит» самого разного предназначения.
    К слову, утилиты Apache Commons лежат в основе нескольких очень известных проектов,
    например, Tomcat, Hibernate и других.

    Вот краткий список некоторых из наиболее часто используемых библиотек Apache Commons:

    Commons Math. Математическая библиотека Apache Commons, имя говорит само за себя:
    она содержит компоненты для сложных математических и статистических операций и вычислений.

    Commons CLI. Предоставляет API для анализа аргументов командной строки.
    Вряд ли стоит даже в мыслях допускать создание приложения
    без возможности передавать параметры и контролировать его поведение!

    Commons CSV. Независимо от того, что вы разрабатываете,
    в какой-то момент вам придется столкнуться с необходимостью использования csv-файлов.
    То есть, их придётся открывать, читать, редактировать, сохранять и создавать.
    Я предлагаю использовать формат RFC 4180 из класса CSVFormat и кодировку UTF-8 при сохранении / создании файлов.

    Commons IO. Используется для упрощения выполнения операций ввода-вывода.
    Присмотритесь, по крайней мере, к ReversedLinesFileReader, он того стоит!



                                        * Guava

    Guava — набор основных библиотек Google для Java.
    Они содержат новые типы коллекций (например, multimap и multiset), неизменяемые коллекции,
    библиотеку графов, функциональные типы? утилиты для параллелизма, ввода/вывода, хэширования,
    обработки строк и многое другое. Все эти инструменты используют специалисты Google в своей работе,
    а это уже хорошая рекомендация.

    В какой-то мере Guava является альтернативой Apache Commons.

    Вот только один из полезных компонентов:
    Возможно, вы уже сталкивались с задачами упорядочивания своих коллекций или сравнения содержимого в них?
    А что насчёт расширенной сортировки и сравнения по нескольким столбцам с несколькими условиями?
    Компонент ComparisonChain используется для реализации расширенной и сложной сортировки для коллекций.



                                        * google-gson

    Библиотека google-gson полезна для преобразования объектов Java в JSON и наоборот.
    Она особенно пригодится при разработке мобильных приложений и создании/использовании REST API,
    а также в любом случае, когда вам нужно преобразовать объект Java в его представление JSON и наоборот.



                                        * Hibernate-ORM

    Hibernate — библиотека, предназначенная для решения задач объектно-реляционного отображения (ORM).
    Hibernate ORM используется для хранения данных в реляционных базах данных.
    Она обеспечивает более простой и абстрактный способ сделать это для разработчиков.
    Он использует JDBC в своей реализации. Hibernate также является реализацией спецификации JPA.



                                        * Mockito

    Пусть название Mockito не вводит вас в заблуждение. Речь не о коктейле, а о библиотеке для mock-объектов.
    Mock-объекты — это объекты, которые имитируют поведение реального объекта по какой-то заданной схеме.
    Например, для модульного тестирования такие «поддельные» объекты могут симулировать поведение бизнес-объектов.
    Ну а mock-библиотека Mockito повышает удобство создания и использования mock-объектов.



                                        * JUnit

    JUnit — свободный Java-фреймворк для создания модульных тестов (они же — юнит-тесты).
    Эта библиотека — одна из самых популярных, её используют почти все.
    Рекомендуем вам разобраться с ней как можно быстрее, поскольку очень часто начинающих Java-разработчиков
    и Java Trainee заставляют «покрывать код тестами». И, надо сказать, это далеко не самое плохое начало карьеры.


                                        * .Log4j и Slf4j

    Эти два фреймворка созданы для скрытия реализации рутинных операций по журналированию определённых событий,
    которые происходят во время работы Java-приложений.
    Slf4j представляет собой абстракцию для других фреймворков журналирования (того же Log4j).



















 */





}
