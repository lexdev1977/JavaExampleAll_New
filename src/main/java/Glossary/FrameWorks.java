package Glossary;

public class FrameWorks {
/*


    Фреймворки Java — по сути, блоки предварительно написанного кода,
    в которые программист может добавлять свой код для решения конкретных проблем.
    Это каркас программной системы (или подсистемы). Он может включать:

    - вспомогательные программы;
    - библиотеки кода;
    - язык сценариев;
    - другое ПО, облегчающее разработку и объединение разных компонентов большого программного проекта.
    - Обычно объединение происходит за счёт использования единого API.
    Фреймворки Java сокращают объём написания кода с нуля, который программистам приходится делать, чтобы найти решение.

    Фреймворк диктует правила построения архитектуры приложения, задавая на начальном этапе разработки
    поведение по умолчанию — каркас, который нужно будет расширять и изменять согласно указанным требованиям.


                                Объяснение фреймворк на примере дома:
    Представьте: вам нужно построить дом. Можно выбрать готовый типовой проект и немного поиграть с планировкой,
    пока архитектор не против и вы не трогаете капитальные стены. А можно нарисовать план самому
    и получить именно тот дом, который хотите — даже если вы хотите цилиндрический дом со входом на втором этаже.

    Разница в том, что в типовом проекте уже всё продумано: оптимальное расположение коммуникаций,
    теплоизоляция стен, способы заливки фундамента, и еще миллион вещей, которые со стороны не видны.
    Вы получаете тёплый и уютный дом, но в рамках готового проекта.

    Так же работает фреймворк. Вы используете готовый шаблон и наполняете его своим кодом.
    Вы теряете в гибкости, зато программа работает стабильно: всё основное фреймворк берёт на себя.
    Под капотом фреймворка миллион нюансов: например, работа с файловой системой
    и базами данных, обработка ошибок, защита паролем.

    Без фреймворка вам нужно будет обо всём думать самостоятельно. Это даёт больше свободы,
    но и больше ответственности. Если криво реализована авторизация в базу данных,
    через эту кривизну код смогут взломать. Если не написали обработку ошибок, программа может не работать.
    На языке строительства это эквивалент дома без канализации или когда в стенах не предусмотрели дырки под розетки.

    Примеры фреймворков:

    - Bootstrap — создание сайтов с адаптивной вёрсткой. Можно рисовать красивые кнопки,
    верстать текст во много колонок, включать-выключать блоки в зависимости от ширины экрана,
    делать выпадающие меню и многое другое
    - Vue.js — обеспечивает единообразие компонентов и модульный подход к разработке.
    Можно создавать собственные строительные блоки для страницы, делать шаблоны
    - Angular.JS —  JavaScript фреймворк от Google для динамических веб-приложений, похож на Vue
    - django — фреймворк для Python, нацеленный на скорость: готовые компоненты для баз данных,
    рисования страниц, админок, окон входа на сайт, шаблонов и множества других вещей
    - Ruby on Rails — тоже сильно ускоряет разработку сайтов

    Вывод: фреймворк даёт стабильность и удобство разработки, но ограничивает программиста своей архитектурой.



                                        Список популярных фреймворков:

                                               * Spring Framework

    Spring Framework — одна из самых мощных и широко используемых платформ Java.
    Благодаря своей концепции внедрения зависимостей и особенностям аспектно-ориентированного
    программирования Spring покорила мир разработки.

    Это платформа с открытым исходным кодом, используемая для корпоративных приложений.
    Фреймворк обычно используется для Enterprise Java. Среда чрезвычайно универсальна
    и может использоваться для создания большинства типов приложений Java.
    С помощью Spring разработчики могут создавать слабосвязанные модули,
    в которых зависимости обрабатываются фреймворком, а не зависят от библиотек в коде.

    Spring чаще всего используют в разработке веб-приложений.
    Его применяет ряд технологических гигантов, включая Netflix и Amazon.
    Главное преимущество фреймворка заключается в том, что он чрезвычайно лёгкий и не требует вызова веб-сервера.
    С точки зрения эффективности это одна из самых популярных платформ Java.
    Spring чрезвычайно прост и, как правило, может использоваться даже новичками.
    Он также обеспечивает обратную совместимость и возможность тестирования.

    Фреймворк Spring является исчерпывающим и охватывает множество функций,
    включая безопасность и настройку подключения к БД, которые легко изучить.
    Кроме того, поскольку это самый популярный веб-фреймворк,
    вы можете найти множество документации и активное сообщество.

    - Основные концепции
    Внедрение зависимостей (DI) (инверсия управления) — в этом принципе вместо того чтобы последовательно брать
    управление потоком приложение передаёт управление внешнему контроллеру, который управляет потоком.
    Внешний контроллер — это события. Когда происходит какое-то событие, поток приложения продолжается.
    Это придаёт гибкость приложению. В Spring IoC выполняется с помощью DI,
    которые бывают трёх типов — внедрение установщика, внедрение метода и внедрение конструктора.

    В Spring объекты называются bean-компонентами. Существует BeanFactory,
    которая управляет и настраивает эти bean-компоненты.
    Вы можете думать о BeanFactory как о контейнере, который создаёт экземпляры.

    Большинство приложений используют XML (beans.xml) для конфигурации.
    ApplicationContext, который является надмножеством BeanFactory, используется для более сложных приложений,
    которым требуется распространение событий, декларативные механизмы и интеграция
    с аспектно-ориентированными функциями Spring.


                                               * Hibernate

    Hibernate — это структура объектно-реляционного сопоставления.
    Основным преимуществом фреймворка Hibernate является то, что он очень эффективен,
    когда дело доходит до решения часто встречающейся проблемы при работе с базами данных на Java
    — несоответствия между обработкой данных объектно-ориентированными языками программирования
    и системами управления реляционными базами данных. Это достигается путём разработки постоянных классов
    и предоставления программисту возможности эффективно взаимодействовать
    с базой данных с минимальными изменениями кода.

    Возможность выполнять операции с базой данных объектов в Java является проблемой,
    когда дело доходит до большинства других фреймворков. Но Hibernate очень эффективно решает эту проблему.
    Он используется рядом крупных компаний, включая IBM, Oracle и Accenture из-за его преимуществ в переносимости.
    Его можно использовать бесплатно, исходный код полностью открыт.

    Хотя Hibernate не является фреймворком полного стека, он полностью изменил наш взгляд на базу данных.
    Как и SQL, запросы в Hibernate называются HQL (Hibernate Query Language).

    Hibernate напрямую сопоставляет классы Java с соответствующими таблицами базы данных и наоборот.
    Основным файлом в спящем режиме является файл hibernate.cfg.xml,
    который содержит информацию о сопоставлении классов Java с конфигурацией базы данных.

    Hibernate решает две основные проблемы с JDBC — JDBC не поддерживает отношения на уровне объектов,
    и если вы когда-нибудь решите перейти на другую базу данных, старые запросы могут не работать,
    что означает много изменений, то есть время и деньги.

    Hibernate предоставляет уровень абстракции, так что код слабо связан с базой данных.
    Такие вещи, как установление соединения с базой данных, выполнение операций CRUD берёт на себя Hibernate.
    Поэтому разработчикам не нужно это реализовывать, что делает код независимым от используемой базы данных.

    Преимущества Hibernate:

    полностью открыт;
    уменьшает избыточность через JDBC API;
    повышает производительность и удобство обслуживания;
    поддерживает API-интерфейсы Persistence;
    обеспечивает связь между приложением и любой базой данных.


                                               * Vaadin

    Фреймворк Vaadin специально ориентирован на доступность UX. Он позволяет программисту
    создавать настраиваемые веб-приложения, предоставляя ему оптимизированную
    и простую в использовании платформу для разработки. Vaadin также предоставляет доступ
    к DOM непосредственно с виртуальной машины Java. Важной особенностью фреймворка является тот факт,
    что взаимодействие, которое происходит между сервером и браузером, полностью автоматизировано.

    Данные могут быть связаны с использованием как MVC, так и MVP через платформу Vaadin.
    Он поставляется со встроенной поддержкой инфраструктуры Spring, а также поддерживает языки JVM,
    такие как Scala и Kotlin. Он также имеет поддержку WebSocket, которая обеспечивает автоматическую связь
    между сервером и клиентом. Как Java, так и HTML можно использовать для построения представлений
    во фреймворке Vaadin. Он имеет интуитивно понятный пользовательский интерфейс
    с поддержкой взаимодействий перетаскивания, что значительно упрощает весь процесс веб-разработки
    для программистов любого уровня подготовки.

    Vaadin — это флагманский продукт, а также платформа, на которой разработчики могут выполнять
    реализацию веб-интерфейса HTML5 с использованием Java. Это платформа с открытым исходным кодом,
    которая включает в себя веб-фреймворк Java и набор веб-компонентов,
    а также средства запуска приложений и инструменты. Эти веб-компоненты составляют ядро Vaadin
    и могут быть настроены для получения высокопроизводительного
    и универсального кода для настольных и мобильных приложений.

    Vaadin Flow — это фактическая часть инфраструктуры Java-платформы Vaadin,
    которая заботится о взаимодействии клиент-сервер, а также о маршрутизации.
    С помощью Vaadin Flow вы можете полностью написать веб-приложение на Java без суеты JS или CSS.
    Компоненты пользовательского интерфейса заботятся о действиях пользователя в браузере,
    используя автоматическую связь с браузером и сервером. Вы можете легко интегрировать компоненты Vaadin в любую IDE,
    которую используете, плюс это кроссплатформенный фреймворк,
    поэтому не нужно беспокоиться о переносе кода на другую платформу.

    Особенности Ваадина:

    Java API для всех веб-компонентов;
    безопасная веб-разработка только для Java;
    две встроенные темы: Lumo и Material;
    переключение между тёмным или светлым режимами;
    альтернативы стилей из Java;
    поддержка кнопки «Назад» и ссылок на контент;
    навигация без перезагрузки всей страницы;
    поддержка JVM;
    по умолчанию получает встроенную поддержку Spring Framework;
    может автоматически устанавливать связь клиент-сервер с помощью веб-сокета;
    есть маршрутизатор с вложенным маршрутом, а также поддержка параметров;
    поддерживает привязку данных через MVC и MVP.



                                               * gRPC

    gRPC — это абстрактная спецификация. Она описывает абстрактную RPC (remote procedure call),
    то есть удалённый вызов процедуры, которая обладает определёнными свойствами.

    Первое свойство — поддержка как одиночных вызовов, так и стриминга. То есть все сервисы,
    которые реализовывают эту спеку, поддерживают оба варианта. Следующий пункт — наличие метаданных,
    то есть чтобы вместе с полезной нагрузкой вы могли бы передать какие-то метаданные — условно, заголовки.
    И ещё поддерживается отмена запроса и таймаутов из коробки.

    Также она предполагает, что описание сообщений и самих сервисов осуществляется
    через некий Interface Definition Language или IDL. Также спецификация описывает wire-протокол поверх HTTP/2,
    то есть gRPC предполагает работу только поверх HTTP/2.

    Считаю, что стоит рассмотреть это как альтернативу стандартному REST.



                                               * Play

    Play — это среда Java, предназначенная для веба и мобильных приложений. Основное применение — в приложениях,
    требующих большого масштабирования. Платформа также совместима с рядом языков помимо Java,
    такими как Python и Ruby. Play не основан на корпоративных стандартах Java.
    Обычно он используется для веб-приложений на основе создания контента, а также для приложений Scala.

    Фреймворк Play в первую очередь известен тем, что он удобен для пользователей, даже для новичков.
    Он позволяет соглашаться с конфигурацией, а также может отображать сообщения об ошибках в самом браузере.
    Он особенно эффективен в высокопроизводительных приложениях благодаря поддержке неблокирующего ввода-вывода.
    Это, безусловно, одна из наиболее отказоустойчивых структур, которая также демонстрирует большую гибкость.

    Play — это нетрадиционный и уникальный тип фреймворка, который следует подходу соглашения, а не конфигурации.
    Он основан на шаблоне MVC и представляет собой платформу веб-приложений с открытым исходным кодом.

    Play похож на Django, Ruby on Rails или архитектуру ASP.NET и не обязательно соответствует веб-стандартам J2EE.

    Особенности Play:

    - высокая производительность за счёт асинхронной обработки;
    - без контейнера, без состояний и построенный на реактивных принципах;
    - использует статически типизированный язык, поэтому большинство ошибок обнаруживается во время компиляции,
    что позволяет избежать множества ошибок на ранних этапах жизненного цикла разработки;
    - Scala исследует истинное ООП вместе с некоторыми концепциями функционального программирования.
    Его совместимость с Java делает систему отличной и мощной;
    - вместе с Play2 была выпущена новая мощная система сборки sbt, которая упрощает интеграцию с проектами Maven,
    а также создание простых файлов JAR;
    - встроены обширные библиотеки доступа к реляционным базам данных для общих функций.

    Play написан с использованием языка программирования Scala.
    Предлагает разработку веб-приложений и мобильных приложений. Он следует архитектуре MVC.
    Play скомпилирован в Java bytecode, и это делает его одним из самых мощных фреймворков.

    Некоторые преимущества использования Play Framework:

    мощные инструменты для консоли и сборки;
    встроенные инструменты тестирования;
    поддержка IDE для Eclipse и IntelliJ IDEA;
    гибкость и отказоустойчивость;
    поддерживает неблокирующие операции ввода-вывода;
    помогает в создании высокопроизводительных приложений;
    поддерживает «горячее кодирование» и «соглашение по конфигурации»;
    может выдавать сообщения об ошибках.


                                              * MapStruct

    Совсем недавно в поле моего зрения попала библиотека MapStruct, которая изменила мой мир.
    Я всегда не очень любил писать builder или свой метод для перекладывания значений из entity в ДТО.
    Для тех, кто так же, как и я, не любит писать этот шаблонный код, приходит на помощь MapStruct.
    Эта библиотека генерирует код, который будет автоматически мапить один класс в другой.
    Это невероятно ускоряет разработку и тестирование кода.


                                              * Lombok

    Эта библиотека предназначена для генерации кода. Она способна генерировать код для достаточно популярных use-cases.
    Стоит лишь поставить необходимые аннотации.

    Достаточно спорная библиотека. Кто-то её любит, кто-то ненавидит, но никого она не оставляет равнодушным.


                                              * Apache POI

    На основе этой библиотеки можно создать внутренний фреймворк для удобной и гибкой генерации отчётов.
    Библиотека поддерживает различные форматы документов, например Word и Excel.



                                              * Liquibase/ FlyWay

    Средства для миграции баз данных. Я слабо представляю современный проект,
    который не будет использовать автоматическое исполнение скриптов для баз данных.
    Каждая из этих библиотек обладает достоинствами и недостатками. Прежде чем остановить свой выбор на одной из них,
    я крайне рекомендую ознакомиться с документацией на официальном сайте и принять взвешенное решение.
    Но даже если спустя время вы поймёте, что решение было ошибочным,
    эти библиотеки предоставляют достаточно безболезненную миграцию друг на друга.



                                              * Testcontainers

    Просто невероятная по своей мощности библиотека, которая позволяет запускать контейнеры в Docker для тестирования.
    У меня она нашла применение в интеграционных тестах. Есть возможность поднять настоящую базу данных
    с использованием миграций FlyWay/Liquibase и проверить полный флоу работы системы.
    Тест-контейнеры можно кастомизировать, а также писать свои.












*/


}
