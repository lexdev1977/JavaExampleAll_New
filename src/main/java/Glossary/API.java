package Glossary;

public class API {

/*

    API (Application Programming Interface или программный интерфейс приложения)
    – это совокупность способов, протоколов, инструментов, с помощью которых различные программы
    обмениваются своими возможностями, данными, выполняют разные функции.

    API создан для удобства. Когда пользователь работает с планшетом или другим девайсом,
    ему не приходится вникать, как компьютер обрабатывает информацию:
    он просто нажимает на иконки в интерфейсе. Аналогичная ситуация с API.
    Благодаря программному интерфейсу разработчик может подключить свой продукт
    к другим системам для хранения файлов, отрисовки графики, воспроизведения видео или аудио.
    При этом ему не приходится писать собственный код или разбираться, как именно работает ОС.
    Такой алгоритм упрощает и ускоряет процессы.

    Перечислим основные причины интереса программистов к применению API:

    - Программный интерфейс дает инструментарий для работы с ПО. Например,
    OpenAl помогает работать со звуковыми библиотеками в приложениях.
    Экономит время для разработчиков — не нужно писать звуковое ПО.
    - Связывает системы. С помощью API можно авторизоваться на сайте,
    используя аккаунт стороннего сервиса.
    По такому же принципу работают платежные системы, соединяясь с банковскими аккаунтами.
    - Обеспечивает безопасность данных. Программный интерфейс выделяет данные, которые необходимо защищать.
    Таким образом, другие программы не смогут ими воспользоваться, если у них на это нет разрешения.
    - Снижают стоимость программного продукта. Выгоднее пользоваться API, чем создавать ПО с нуля.

    Функции API -
    Общего перечня функций API нет: набор инструментов, доступных клиентам, определяют разработчики.
    Например, с помощью API YouTube можно встроить видео на свой сайт,
    а с помощью API платежных систем собирать платежи, оформлять возвраты или обрабатывать споры.

    Некоторые компании предлагают API в качестве отдельного программного продукта.
    Допустим, вы хотите встроить интерактивные карты на сайт интернет-магазина,
    чтобы покупатель мог найти ближайший пункт выдачи товара, и выбираете API Яндекс.Карт.
    Разрабатывать собственный картографический сервис не придется.
    Сервис сайта отправит запрос к сервису Яндекса на поиск организаций на карте,
    а после получения ответа отобразит данные в браузере покупателя.


                            Типы API
                            По типу доступа программные интерфейсы API бывают:

    - Внутренние. Используют только сотрудники компании. Нужны для решения внутренних задач организации:
    снижения расходов и отладки процессов.
    - Партнерские. Создают для партнеров и клиентов компании.
    Применяют для разработки веб-продуктов и сокращения издержек.
    - Публичные. Их создают для привлечения внимания и продвижения веб-продукта и компании,
    продаж, разработки новых сервисов и приложений.



                            Виды API (альтернатива выше упомянутым):

    - Веб-API. Доступ к веб-API можно получить с помощью протокола HTTP. Они включают API-интерфейсы,
    используемые для связи с браузером. Это могут быть такие службы, как веб-уведомления и веб-хранилище.

    - Публичные API. Публичные API доступны разработчикам с минимальными ограничениями,
    однако они могут потребовать регистрации или использования ключа API.
    Многие компании используют общедоступные API от более крупных организаций, таких как Facebook и Google,
    для получения доступа к данным, которые иначе были бы недоступны.

    - Внутренние API. Внешние разработчики не могут получить доступ к внутренним API.
    Они используются внутри компании и позволяют разработчикам использовать инструменты, данные и программы друг друга.

    - Партнерские API. Партнерские API предоставляют ограниченный доступ,
    который контролируется через сторонний шлюз API.
    Они созданы для определенной цели, например, для предоставления доступа к платным услугам.

     - Составные API. Составные API-интерфейсы обеспечивают доступ к нескольким конечным точкам за один вызов.
    Они особенно полезны в микросервисных архитектурах, где пользователю может потребоваться информация
    из нескольких сервисов для выполнения одной задачи.



    Плюсы работы с API
    Преимуществ работы с интерфейсом программирования много. Основные из них:

    - Готовые решения экономят время и деньги на разработке;
    - API – качественные программные продукты: опытные разработчики учитывают нюансы, о которых не знают начинающие;
    - С программным интерфейсом легко работать;
    - API предоставляет доступ к актуальным данным в режиме реального времени.


                                              *** Из другой статьи

    Ответ на вопрос «Что такое API?» - это инструмент для взаимодействия нескольких программ

    Программный интерфейс включает в себя функции, классы, методы и структуры,
    помогающие одному приложению взаимодействовать с другим. API содержит в себе некие «мостики»,
    позволяющие программе А получить доступ к данным из программы Б или к некоторым ее возможностям.
    Таким образом, программисты могут расширять функциональность своего продукта и связывать его с чужими разработками.

    Все это с разрешения создателей программы А и с соблюдением всех мер безопасности,
    чтобы разработчики, желающие использовать API, не смогли получить доступ к конфиденциальной информации.



    * Главный принцип работы API. Почему его называют интерфейсом

    Простыми словами, интерфейс – это «прослойка» между приложением А и приложением Б.
    В ней происходят процессы, которые позволяют двум программам обмениваться информацией и выполнять функции,
    связанные с обеими сторонами, скрывая «внутреннее строение» программ.


   Такой подход позволяет наладить взаимодействие между несколькими утилитами, не задумываясь о том,
   как они устроены, какая программная логика ими движет и каким образом обрабатываются передаваемые данные.
   Интерфейсы упрощают работу как для простых пользователей, так и для программистов.
   Первым не приходится задумываться о том, что стоит за привычными функциями в их гаджетах,
   а разработчикам не нужно изучать код других программистов, чтобы подключить чужой продукт к своему.


   Это называется инкапсуляцией. Сокрытием части функций ради упрощения работы в целом
   и минимизации участков программного обеспечения, где один из разработчиков мог бы допустить ошибку.



   * Набор функций в программных интерфейсах приложения

    Список опций, доступных при работе с тем или иным API, зависит от разработчиков.
    Есть три основных пункта, описывающих работу интерфейса и методы взаимодействия с ним:

    Процесс, который может выполнять программа, используя API.
    Данные, которые нужно передать интерфейсу для выполнения функции.
    Данные, которые программа получит на выходе после обработки с помощью API.
    По сути, мы имеем скрытую функцию или набор скрытых функций,
    внутри которых происходит обработка и выдача передаваемых данных
    (и этот процесс скрывается благодаря инкапсуляции).



    * Составление набора функций в API

    Внутреннее устройство API зависит от того, каким образом его организует разработчик.
    Есть стандартные варианты, но они не являются «догматом».

    Например, кто-то в отдельный набор функций определяет возможность регистрироваться и авторизоваться.
    Другие программисты добавляют в API набор скрытых функций для внедрения уже существующего сервиса
    в стороннее приложение или на сторонний веб-сайт (платежные системы, навигация и т.п.).

    Некоторые разработчики делят API на группы. К примеру, отдельно инструмент для работы с платежными системами
    и отдельно другие функции банка. Но можно подключать все одним набором,
    и тогда уже второй разработчик будет выбирать, какие из доступных возможностей API использовать.


    * Зачем нужен API?

    Во-первых, такой подход позволяет делать программы надежнее.
    Инкапсуляция в целом заметно упрощает жизнь разработчиков. Отдельные компоненты приложений становятся абстракциями.
    Создателям нового ПО не приходится лезть в логику низкоуровневых функций и разбираться в их реализации.
    Так заметно повышается безопасность выполняемых задач, что особенно заметно
    на уровне таких масштабных программных продуктов, как операционные системы.
    Программы постоянно выполняют сотни внутренних задач, при этом они проходят незаметно для пользователя
    и не могут навредить друг другу.

    Во-вторых, на API можно заработать. Например, сервисы, предоставляющие информацию с метеовышек,
    берут плату за каждый запрос актуальной погоды, если их API используется в сторонних приложениях.
    Аналогичные условия могут предлагать и другие компании, предоставляющие услуги.
    Будь то навигация, конвертация файлов в другие форматы и прочие возможности, реализуемые через API.


   Почему разработчики используют API?

    Есть как минимум еще 4 причины, объясняющие интерес программистов к API:

    - API упрощает и ускоряет создание новых продуктов. Разработчикам не приходится каждый раз изобретать велосипед.
    Можно взять API нейронной сети TenserFlow, к примеру, и внедрить в свое программное обеспечение,
    а не создавать собственную систему машинного обучения.
    - Как я уже отметил выше, программный интерфейс увеличивает безопасность разработки.
    С помощью него можно вынести ряд функций в отдельное приложение, сделав невозможным их некорректное использование.
    От человеческого фактора это тоже спасает.
    - API упрощает настройку связей между разными сервисами и программами.
    Интерфейс нивелирует необходимость в тесном сотрудничестве создателей различных приложений.
    Разработчики могут внедрять поддержку сторонних сервисов, вообще не контактируя с их создателями.
    - Наличие готовых интерфейсов позволяет сэкономить не только время и силы программистов,
    но и финансы, с которыми часто связано создание новых программных решений.

























 */


}
