package Java_Extend.Collections_Framework;

public class List_Map_Set_Difference {

    /*
    Быстрая памятка по интерфейсам List Map и Set и их реализациям

    List (Список):                       список значений,  (имеется индекс для возврата значения)
    Map (Словарь):                уникальный ключ  + значение, (возврат по уникальному ключу)
    Set (Набор, Множество, Коллекция)    множество уникальных значений (проверка является ли объектом множества)

    !!!  Коллекция не имеет метода get () для получения элемента.
    Вы можете перемещаться по элементам только с помощью iterator ().


                                        *List (Список):

    Представляет упорядоченную последовательность объектов.
    Элементы, содержащиеся в списке Java, могут быть вставлены,
    повторены и удалены в соответствии с порядком их появления в нем.
    Порядок элементов – вот почему эта структура данных называется списком.

    ArrayList: : представляет массив, с динамически изменяющимся размером.
    Доступ к элементам может быть произвольным, а скорость вставки и удаления элементов в ArrayList () низкая.


    List<Integer> arrayList = new ArrayList<>();
    arrayList.add(1) - добавить
    arryaList.get(0) - вернуть по индексу ноль


    LinkedList: использует структуру данных связанного списка в реализации. ()
    Скорость вставки и удаления высокая, но скорость доступа низкая.
    Представляет собой цепочку элементов, в которой каждый элемент имеет ссылку на предыдущий элемент и на следующий.
    Также имеется ссылка на начало и на конец списка.

    List<Integer> linkedList = new LinkedList<>();
    myList.add(1) - добавить
    myList.get(0) - вернуть по индексу ноль


                                        *Map

    Map (Набор): это структура данных, которая содержит набор пар “ключ-значение”

    Map<Integer, String> hashmap = new HashMap<>(); // не сохраняется порядок добавления

    Map<Integer, String> linkedHashMap = new LinkedHashMap<>(); // сохраняется порядок добавления

    Map<Integer, String> treeMap = new TreeMap<>(); // сортировка по ключу (естественный порядок)

    map01.put(1, "Один") - записать данные по ключу - 1
    map01.get(1) - получить данные по ключу - 1



                                        *Set

    Интерфейс Set представляет собой набор уникальных значений и тоже наследуется от Collection.
    У этого интерфейса есть несколько реализаций, но каждая из них гарантирует, что каждое значение в наборе уникально.
    Сравнение любых двух объектов между собой в Java происходит при помощи
    методов equals() и hashCode() из базового класса Object.

    Set<String> hashSet = new HashSet<>(); // не сохраняется порядок добавления
    Set<String> linkedHashSet = new LinkedHashSet<>(); // сохраняется порядок добавления
    Set<String> treeSet = new TreeSet<>(); // сортировка по ключу (естественный порядок)






     */
}
